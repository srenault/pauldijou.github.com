<?xml version='1.0' encoding='utf-8' ?>
<feed xml:lang='en-US' xmlns='http://www.w3.org/2005/Atom'>
  <id>http://pauldijou.fr/</id>
  <title>Paul Dijou Blog</title>
  <updated>2013-02-18T22:36:04+01:00</updated>
  <link href='http://pauldijou.fr/rss.atom' rel='self' type='application/atom+xml' />
  <link href='http://pauldijou.fr/' rel='alternate' type='text/html' />
  <entry>
    <id>http://pauldijou.fr/blog/2013/02/17/angularjs-routing-playframework.html</id>
    <title>AngularJS HTML5 routing on PlayFramework</title>
    <updated>2013-02-18T22:36:04+01:00</updated>
    <published>2013-02-17T00:00:00Z</published>
    <link href='http://pauldijou.fr/blog/2013/02/17/angularjs-routing-playframework.html' rel='alternate' type='text/html' />
    <category term='en'></category>
    <category term='fr'></category>
    <category term='angular'></category>
    <category term='play'></category>
    <category term='html5'></category>
    <summary>
      
English version
Version Française



The problem
AngularJS provides a nice $location service which allows you to deal with routing and url inside your application. It supports both a fallback mode using hashbang and a real HTML5 routing using the new History API. Since we love bleeding edge technologies, that&#8217;s obvious we want to use the History API if possible. Lucky us, it appears it&#8217;s quite easy to do so with a Play Framework application. Let&#8217;s see how to do that.
The full code of the demo is available here: https://github.com/blogsamples/angularjs-play21-html5-routing
Simple configuration
Let&#8217;s keep things simple. Creating a new Play Framework application with play new. We...
    </summary>
    <content type='html'>
      &lt;ul class=&quot;nav nav-tabs&quot;&gt;
&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#2013-02-17-angularjs-routing-playframework-en&quot; data-toggle=&quot;tab&quot;&gt;English version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2013-02-17-angularjs-routing-playframework-fr&quot; data-toggle=&quot;tab&quot;&gt;Version Française&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot;&gt;
&lt;div class=&quot;tab-pane active&quot; id=&quot;2013-02-17-angularjs-routing-playframework-en&quot;&gt;
&lt;h3&gt;The problem&lt;/h3&gt;
&lt;p&gt;AngularJS provides a nice &lt;code&gt;$location&lt;/code&gt; service which allows you to deal with routing and url inside your application. It supports both a fallback mode using hashbang and a real HTML5 routing using the new &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html&quot;&gt;History &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/a&gt;. Since we love bleeding edge technologies, that&amp;#8217;s obvious we want to use the History &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; if possible. Lucky us, it appears it&amp;#8217;s quite easy to do so with a Play Framework application. Let&amp;#8217;s see how to do that.&lt;/p&gt;
&lt;p&gt;The full code of the demo is available here: &lt;a href=&quot;https://github.com/blogsamples/angularjs-play21-html5-routing&quot;&gt;https://github.com/blogsamples/angularjs-play21-html5-routing&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Simple configuration&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s keep things simple. Creating a new Play Framework application with &lt;code&gt;play new&lt;/code&gt;. We will use a Scala application in this article, but it should as easy with a Java one. Then add AngularJS using &lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt; (see &lt;a href=&quot;https://github.com/blogsamples/angularjs-play21-html5-routing/blob/master/app/views/main.scala.html#L19&quot;&gt;https://github.com/blogsamples/angularjs-play21-html5-routing/blob/master/app/views/main.scala.html#L19&lt;/a&gt;). Then we will create an Angular module for our app and enable the HTML5 routing mode which is disable by default.&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;var app = angular.module(&quot;app&quot;, [&quot;ngResource&quot;])&amp;#x000A;  .config([&quot;$routeProvider&quot;, function($routeProvider) {&amp;#x000A;      return $routeProvider.when(&quot;/&quot;, {&amp;#x000A;        templateUrl: &quot;/views/index&quot;,&amp;#x000A;        controller: &quot;AppCtrl&quot;&amp;#x000A;      }).otherwise({&amp;#x000A;        redirectTo: &quot;/&quot;&amp;#x000A;      });&amp;#x000A;    }&amp;#x000A;  ])&amp;#x000A;  .config([&quot;$locationProvider&quot;, function($locationProvider) {&amp;#x000A;      return $locationProvider.html5Mode(true).hashPrefix(&quot;!&quot;);&amp;#x000A;    }&amp;#x000A;  ]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice. Now we will make some modification to the default views generated by Play. We want a single-page application, which means our root url must map to a main page which will contains all resource dependencies and includes the &lt;code&gt;ng-view&lt;/code&gt; of AngularJS. I&amp;#8217;ve done that by editing the &amp;#8220;main.scala.html&amp;#8221; file as you can see here: &lt;a href=&quot;https://github.com/blogsamples/angularjs-play21-html5-routing/blob/master/app/views/main.scala.html&quot;&gt;https://github.com/blogsamples/angularjs-play21-html5-routing/blob/master/app/views/main.scala.html&lt;/a&gt; and add a new Play route:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;GET     /                           controllers.Application.main(any = &quot;none&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And a new &lt;code&gt;Action&lt;/code&gt; in my Application controller:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;def main(any: String) = Action {&amp;#x000A;  Ok(views.html.main())&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wait. Why is there a String param for the main method? And why do we pass a default &lt;code&gt;any = &quot;none&quot;&lt;/code&gt; value? It seems a bit useless&amp;#8230; Fair enough, I will explain it later on the article, don&amp;#8217;t mind it for now. So, we have our main page. Let&amp;#8217;s add some content for the landing page. As we have specified in the AngularJS routing, our root url, which is defined with &lt;code&gt;$routeProvider.when(&quot;/&quot;, ...)&lt;/code&gt; is pointing to &lt;code&gt;/views/index&lt;/code&gt;. So we need a Play route for that&amp;#8230; but before, let&amp;#8217;s talk about all those routes.&lt;/p&gt;
&lt;h3&gt;Routes, routes, routes&amp;#8230;&lt;/h3&gt;
&lt;p&gt;As we advance in our coding, we can see that the term &amp;#8220;route&amp;#8221; is used in different contexts. It&amp;#8217;s important to fully understand them all. Play routes, which are defined in the &lt;code&gt;conf/routes&lt;/code&gt; file, are the core of your application. It&amp;#8217;s those routes which will answer to the &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; requests, serving either &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt;, or whatever. But you, as the developer, will be the only one to know about them. Users of your application will only use and see AngularJS routes, which are defined in your main module using the &lt;code&gt;$routeProvider&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The idea is that when a user land on your site, it should use AngularJS routing which will then use Play routes to load the template (= the content) of the page. So why not using the exact same url for both the AngularJS route and the templateUrl route? Well, in the case of the root, it&amp;#8217;s obvious: the Play &amp;#8220;/&amp;#8221; route is already required for our main page. Ok. But in a more general case, could we do:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;$routeProvider.when(&quot;/page&quot;, {&amp;#x000A;  templateUrl: &quot;/page&quot;,&amp;#x000A;  controller: &quot;PageCtrl&quot;&amp;#x000A;})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nope, you can&amp;#8217;t. Well, that&amp;#8217;s a small lie&amp;#8230; you could do that, and it would work if your user &lt;strong&gt;always&lt;/strong&gt; open your main page first. If he does that, then all AngularJS routing is loaded, and when the user will go to &amp;#8220;/page&amp;#8221; url, it will be catch by AngularJS which will ask for the &amp;#8220;/page&amp;#8221; on Play routes which will give him the content of the page. So what&amp;#8217;s the problem? If you user &lt;strong&gt;directly&lt;/strong&gt; land on the &amp;#8220;/page&amp;#8221; url, because he arrived for the first time on your application after having clicked on a link somewhere which was pointing at &amp;#8220;/page&amp;#8221;, then the Play route will be directly called since there is no AngularJS routing initialized at all&amp;#8230; And that&amp;#8217;s bad, right? The user would have the raw content of the page without any JavaScript or &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; from the main page. It&amp;#8217;s a fail.&lt;/p&gt;
&lt;p&gt;In order to prevent that, I have chosen to use some conventions. There is nothing official, you can use your own, the only thing to keep in mind is that AngularJS routes and Play routes should &lt;strong&gt;never&lt;/strong&gt; be equals. My solution to do that is to prefix all Play routes serving &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; with a &amp;#8220;/views/&amp;#8221; prefix, all Play routes serving &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; with a &amp;#8220;/api/&amp;#8221; prefix and, as it is by default, all Play routes serving resources with a &amp;#8220;/assets/&amp;#8221; prefix. Meaning I can now use all routes I want inside AngularJS routing but never starts them with one of those prefix.&lt;/p&gt;
&lt;p&gt;Of course, it will just modify the problem without solving it. Now, if a user land directly on &amp;#8220;/page&amp;#8221;, he will have a huge orange Play error telling him that the route doesn&amp;#8217;t exist. As before, AngularJS routing isn&amp;#8217;t loaded, so it&amp;#8217;s Play routing which try to handle that and, since there is no longer any &amp;#8220;/page&amp;#8221; route in Play, it crash.&lt;/p&gt;
&lt;p&gt;So what&amp;#8217;s the point of having different routes? The next trick is to redirect all unknow routes to our main page. By doing so, if the user land on &amp;#8220;/page&amp;#8221;, Play will say &lt;span class=&quot;talk red&quot;&gt;&amp;#8220;I don&amp;#8217;t know that route, go to the main page&amp;#8221;&lt;/span&gt;, so the user will indeed go to your main page, but then, all AngularJS routing will be loaded and super awesome AngularJS will say &lt;span class=&quot;talk blue&quot;&gt;&amp;#8220;Hey, I do know that route, and I need the /views/page template&amp;#8221;&lt;/span&gt;, and then Play will respond &lt;span class=&quot;talk red&quot;&gt;&amp;#8220;Oh yeah, I can serve you /views/page, here is the &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; to display&amp;#8221;&lt;/span&gt;, and your user will see the correct &amp;#8220;/page1&amp;#8221; content, even if he lands directly on it.&lt;/p&gt;
&lt;p&gt;Another question? Why didn&amp;#8217;t we use this trick before and then have the same routes for both AngularJS and Play? Because it&amp;#8217;s important that the trick apply only to unknow routes. We cannot redirect to the main page an existing Play route because it needs to serve its own content. So by using different routes, we can intercept AngularJS routes inside Play as &amp;#8220;unknown routes&amp;#8221; and redirect them to the main page so AngularJS can handle them. I hope I&amp;#8217;m clear enough here, that might be the hardest part of the article. In order to achieve that, we just need to put a Play route at the end of the route file which intercept all routes and redirect them to the main page:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;GET     /*any                       controllers.Application.main(any)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now you should understand why we had a &lt;code&gt;any: String&lt;/code&gt; for our main page at the beginning.&lt;/p&gt;
&lt;h3&gt;First pages&lt;/h3&gt;
&lt;p&gt;Enough with all the theory, let&amp;#8217;s do two concrete pages: creating &amp;#8220;page1.scala.html&amp;#8221; and &amp;#8220;page2.scala.html&amp;#8221; files with basic content (see source code, I&amp;#8217;m using a template to stay &lt;span class=&quot;caps&quot;&gt;DRY&lt;/span&gt; about the title and the menu but that&amp;#8217;s not important), add then as Play routes (with a &amp;#8220;/views/&amp;#8221; as stated before) and also add them inside our controller:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;@()&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;@template() {&amp;#x000A;  &amp;lt;h2&amp;gt;Page1&amp;lt;/h2&amp;gt;&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;GET     /views/page1                controllers.Application.page1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;def page1 = Action {&amp;#x000A;  Ok(views.html.page1())&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then add the AngularJS routing:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;.when(&quot;/page1&quot;, {&amp;#x000A;  templateUrl: &quot;/views/page1&quot;&amp;#x000A;})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;#8217;s it. We can now create a link, using a &lt;code&gt;a&lt;/code&gt; tag, to point to the url &amp;#8220;/page1&amp;#8221; and AngularJS will do the rest, loading the &amp;#8220;/views/page1&amp;#8221; template using Play route which will return the &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; code generated from our Scala template. Nice isn&amp;#8217;t it? The url is correct: http://localhost:9000/page1, you can use the back button to return to the index page, no ugly hashbang, but all in Ajax with a single-page application.&lt;/p&gt;
&lt;h3&gt;Handling url parameters&lt;/h3&gt;
&lt;p&gt;So, we have our url working by using the History &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; thanks to the HTML5 mode of the AngularJS $routeProvider. But that&amp;#8217;s only for raw url. What if we want to have dynamic parameters inside them? Just like &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt;, having url as &amp;#8220;/colors/1&amp;#8221; and &amp;#8220;/colors/2&amp;#8221; if we deal with colors (yeah, why not?). Do you think that&amp;#8217;s easy? Well, you could, after all, both AngularJS and Play know how to handle parameters in their url. We could do something like:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;.when(&quot;/colors/:id&quot;, {&amp;#x000A;  templateUrl: &quot;/views/color/:id&quot;,&amp;#x000A;  controller: &quot;ColorCtrl&quot;&amp;#x000A;})&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;GET     /views/color/:id             controllers.Application.color(id: String)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nope, we can&amp;#8217;t. Why? Because the &amp;#8220;templateUrl&amp;#8221; cannot handle url parameters. It&amp;#8217;s just a template. And of course, using &lt;code&gt;templateUrl: &quot;/views/color&quot;&lt;/code&gt; will not pass any &amp;#8220;id&amp;#8221; parameter to the Play route. Damn&amp;#8230;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s not a problem in fact. Just keep to the AngularJS way of doing things: it&amp;#8217;s not Play who should handle the data any longuer, it&amp;#8217;s AngularJS who rules the world now, so you don&amp;#8217;t need any params in your Scala code, just trust AngularJS. Ok, but we need a way to load the correct color depending on the id in the url right? Sure thing. It&amp;#8217;s the role of AngularJS controller to that. That&amp;#8217;s why there is a &amp;#8220;ColorCtrl&amp;#8221; along with our template, and guess what, the AngularJS controller know about the url params. Here is the code of the controller:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;app.controller(&quot;ColorCtrl&quot;, [&quot;$scope&quot;, &quot;$routeParams&quot;, function($scope, $routeParams) {&amp;#x000A;  // Thanks to scope inheritance, we can access the &quot;db&quot; from the AppCtrl scope&amp;#x000A;  $scope.color = $scope.db[$routeParams.id];&amp;#x000A;  if (!$scope.color) {&amp;#x000A;    $scope.msg = &quot;There is no color for id &quot;+$routeParams.id;&amp;#x000A;  } else {&amp;#x000A;    $scope.msg = undefined;&amp;#x000A;  }&amp;#x000A;}])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And just for fun, I&amp;#8217;ve defined the fake database in the &amp;#8220;AppCtrl&amp;#8221;:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;app.controller(&quot;AppCtrl&quot;, [&quot;$scope&quot;, function($scope) {&amp;#x000A;  $scope.db = {&amp;#x000A;    1: {&amp;#x000A;      name: &quot;black&quot;,&amp;#x000A;      hex: &quot;000000&quot;&amp;#x000A;    },&amp;#x000A;    2: {&amp;#x000A;      name: &quot;white&quot;,&amp;#x000A;      hex: &quot;FFFFFF&quot;&amp;#x000A;    }&amp;#x000A;  };&amp;#x000A;}]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So as we can see, using the &lt;code&gt;$routeParams&lt;/code&gt; service, we can retrieve the url params and then load the correct color in the &lt;code&gt;$scope&lt;/code&gt;. At the end, it&amp;#8217;s just a matter of displaying that color in our view using AngularJS data-binding:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;@()&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;@template() {&amp;#x000A;  &amp;lt;div data-ng-show=&quot;msg&quot;&amp;gt;&amp;#x000A;    &amp;lt;h2&amp;gt;{{msg}}&amp;lt;/h2&amp;gt;&amp;#x000A;  &amp;lt;/div&amp;gt;&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;  &amp;lt;div data-ng-hide=&quot;msg&quot;&amp;gt;&amp;#x000A;    &amp;lt;h2&amp;gt;Color {{color.name}}: # {{color.hex}}&amp;lt;/h2&amp;gt;&amp;#x000A;  &amp;lt;/div&amp;gt;&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;#8217;s it! you can now display some data depending of params inside your url (and show an error message in case the data doesn&amp;#8217;t exist). Cool isn&amp;#8217;t it?&lt;/p&gt;
&lt;h3&gt;Want more?&lt;/h3&gt;
&lt;p&gt;Oh God, you are still reading? You should already be able to do anything you need. But if you want, we can dive in a more complex example, using AngularJS &lt;code&gt;$resource&lt;/code&gt; service and serve &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; from Play like a &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; would do. Sounds good for you? Ok, let&amp;#8217;s do that. First, we will create a &amp;#8220;Users&amp;#8221; controller and it will have two methods: &amp;#8220;all()&amp;#8221; and &amp;#8220;find(id: String)&amp;#8221; which will return an Array of Json and a Json object representing our list of users and one particular user based on its id. I will not use a real database, but something like MongoDB would fit really good in there. Here is the code:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;package controllers&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;import play.api._&amp;#x000A;import play.api.mvc._&amp;#x000A;import play.api.libs.json._&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;object Users extends Controller {&amp;#x000A;  val db = Json.arr(&amp;#x000A;    Json.obj( &quot;id&quot; -&amp;gt; &quot;1&quot;, &quot;name&quot; -&amp;gt; &quot;John&quot; ),&amp;#x000A;    Json.obj( &quot;id&quot; -&amp;gt; &quot;2&quot;, &quot;name&quot; -&amp;gt; &quot;Suzanne&quot; )&amp;#x000A;  )&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;  def all() = Action {&amp;#x000A;    Ok(db)&amp;#x000A;  }&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;  def find(id: String) = Action {&amp;#x000A;    Ok(db.value.filter(v =&amp;gt; (v \ &quot;id&quot;).as[JsString].value == id).headOption.getOrElse(new JsUndefined(&quot;&quot;)))&amp;#x000A;  }&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don&amp;#8217;t fully understand it, you can check the PlayFramework documentation about handling Json (&lt;a href=&quot;http://www.playframework.com/documentation/2.1.0/ScalaJsonRequests&quot;&gt;http://www.playframework.com/documentation/2.1.0/ScalaJsonRequests&lt;/a&gt;). I am using the new Json &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; from Play 2.1 (&lt;a href=&quot;http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.json.package&quot;&gt;http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.json.package&lt;/a&gt;). Next we need our &amp;#8220;UserCtrl&amp;#8221; which will use the &lt;code&gt;$resource&lt;/code&gt; service to retrieve the data:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;app.controller(&quot;UserCtrl&quot;, [&quot;$scope&quot;, &quot;$routeParams&quot;, &quot;$resource&quot;, &quot;apiUrl&quot;, function($scope, $routeParams, $resource, apiUrl) {&amp;#x000A;  var Users = $resource(apiUrl + &quot;/users/:id&quot;, {id:&quot;@id&quot;});&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;  if($routeParams.id) {&amp;#x000A;    $scope.user = Users.get({id: $routeParams.id}, function() {&amp;#x000A;      if (!$scope.user.id) {&amp;#x000A;        $scope.msg = &quot;There is no user for id &quot;+$routeParams.id;&amp;#x000A;      } else {&amp;#x000A;        $scope.msg = undefined;&amp;#x000A;      }&amp;#x000A;    });&amp;#x000A;  } else {&amp;#x000A;    $scope.users = Users.query();&amp;#x000A;  }&amp;#x000A;}])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To learn more about AngularJS $resource definition, see: &lt;a href=&quot;http://docs.angularjs.org/api/ngResource.$resource&quot;&gt;http://docs.angularjs.org/api/ngResource.$resource&lt;/a&gt;. What is that &amp;#8220;apiUrl&amp;#8221; by the way? It&amp;#8217;s a constant I&amp;#8217;ve defined in my AngularJS app:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;var app = angular.module(&quot;app&quot;, [&quot;ngResource&quot;])&amp;#x000A;  .constant(&quot;apiUrl&quot;, &quot;http://localhost:9000\:9000/api&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;&lt;strong&gt;Pro tip&lt;/strong&gt; Why is there the 9000 port twice? That&amp;#8217;s because if we had written &lt;code&gt;http://localhost:9000/api&lt;/code&gt;, AngularJS syntax would have analyzed that as a url with a dynamic parameter named &amp;#8220;9000&amp;#8221; because it&amp;#8217;s placed right after a &lt;code&gt;:&lt;/code&gt; character. So we need that strange syntax to tell AngularJS that this is not a parameter but a real value in our url.&lt;/div&gt;
&lt;p&gt;Next, we are creating our resource by extending this apiUrl with our routing &amp;#8220;/users/:id&amp;#8221;. This time, &amp;#8220;:id&amp;#8221; is a real parameter. We can now use &amp;#8220;get&amp;#8221; and &amp;#8220;query&amp;#8221; methods on the resource, passing or not a value to the id, in order to retrieve our Json code and assign it to the &lt;code&gt;$scope&lt;/code&gt;. We will need two Scala views: one for the list and one for the detail of course.&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;@()&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;@template() {&amp;#x000A;  &amp;lt;h2&amp;gt;Users&amp;lt;/h2&amp;gt;&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;  &amp;lt;ul&amp;gt;&amp;#x000A;    &amp;lt;li data-ng-repeat=&quot;u in users&quot;&amp;gt;&amp;#x000A;      &amp;lt;a data-ng-href=&quot;/users/{{u.id}}&quot;&amp;gt;User# {{u.id}}: {{u.name}}&amp;lt;/a&amp;gt;&amp;#x000A;    &amp;lt;/li&amp;gt;&amp;#x000A;  &amp;lt;/ul&amp;gt;&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;@()&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;@template() {&amp;#x000A;  &amp;lt;div data-ng-show=&quot;msg&quot;&amp;gt;&amp;#x000A;    &amp;lt;h2&amp;gt;{{msg}}&amp;lt;/h2&amp;gt;&amp;#x000A;  &amp;lt;/div&amp;gt;&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;  &amp;lt;div data-ng-hide=&quot;msg&quot;&amp;gt;&amp;#x000A;    &amp;lt;h2&amp;gt;User# {{user.id}} {{user.name}}&amp;lt;/h2&amp;gt;&amp;#x000A;  &amp;lt;/div&amp;gt;&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&amp;#8217;s it. We now have a list of users and links to each user detail, and all that data is fetch from a &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; using Json.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;&lt;strong&gt;Pro tip&lt;/strong&gt; By the way, since our Play routes doesn&amp;#8217;t clash with AngularJS routes, you can load them directly in your browser. It will works because the Play route handling the redirection to the main page is at the end of the route file, so any real Play route will be loaded before the redirection. If you have the demo running, check &lt;a href=&quot;http://localhost:9000/api/users&quot;&gt;http://localhost:9000/api/users&lt;/a&gt; and &lt;a href=&quot;http://localhost:9000/api/users/1&quot;&gt;http://localhost:9000/api/users/1&lt;/a&gt; to see your &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; working nicely.&lt;/div&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I hope this article will help you bootstrap your next awesome application using awesome tools like AngularJS and PlayFramework. Your next step (if that&amp;#8217;s not already the case) would be to learn more about the new PlayFramework Json &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; so you can have typesafe Json (if I can say so). You would also probably need to plug a database on it. One choice could be a &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt; database since it can store raw Json, and interact with it using a nice driver like &lt;a href=&quot;http://reactivemongo.org/&quot;&gt;ReactiveMongo&lt;/a&gt; if you want to go all the way down to asynchronous application.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s up to you!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tab-pane&quot; id=&quot;2013-02-17-angularjs-routing-playframework-fr&quot;&gt;
&lt;h3&gt;Le problème&lt;/h3&gt;
&lt;p&gt;AngularJS fournit un service bien utile du nom de &lt;code&gt;$location&lt;/code&gt; qui permet de gérer les urls et le routing de votre application. Il supporte à la fois un mode par défault utilisant un hashbang et un mode réellement HTML5 utilisant la nouvelle &lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html&quot;&gt;History &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/a&gt;. Comme nous sommes partisants des technologies à la pointe, il est évident qu&amp;#8217;il nous faut utiliser l&amp;#8217;API History. Et comme nous sommes chanceux, c&amp;#8217;est relativement simple de faire cela avec PlayFramework.&lt;/p&gt;
&lt;p&gt;Le code source de la démo est disponible ici : &lt;a href=&quot;https://github.com/blogsamples/angularjs-play21-html5-routing&quot;&gt;https://github.com/blogsamples/angularjs-play21-html5-routing&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Simple configuration&lt;/h3&gt;
&lt;p&gt;Commençons par les bases en créant une nouvelle application Play Framework via la commande &lt;code&gt;play new&lt;/code&gt;. Nous allons utiliser la version Scala dans cet article mais c&amp;#8217;est tout aussi simple en Java. Une fois l&amp;#8217;application générée, on va pouvoir ajouter AngularJS en utilisant un &lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt; (voir &lt;a href=&quot;https://github.com/blogsamples/angularjs-play21-html5-routing/blob/master/app/views/main.scala.html#L19&quot;&gt;https://github.com/blogsamples/angularjs-play21-html5-routing/blob/master/app/views/main.scala.html#L19&lt;/a&gt;). Enfin, nous allons créer un module AngularJS pour configurer notre application et activer le routing HTML5 car il est désactivé par défaut.&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;var app = angular.module(&quot;app&quot;, [&quot;ngResource&quot;])&amp;#x000A;  .config([&quot;$routeProvider&quot;, function($routeProvider) {&amp;#x000A;      return $routeProvider.when(&quot;/&quot;, {&amp;#x000A;        templateUrl: &quot;/views/index&quot;,&amp;#x000A;        controller: &quot;AppCtrl&quot;&amp;#x000A;      }).otherwise({&amp;#x000A;        redirectTo: &quot;/&quot;&amp;#x000A;      });&amp;#x000A;    }&amp;#x000A;  ])&amp;#x000A;  .config([&quot;$locationProvider&quot;, function($locationProvider) {&amp;#x000A;      return $locationProvider.html5Mode(true).hashPrefix(&quot;!&quot;);&amp;#x000A;    }&amp;#x000A;  ]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool. On va maintenant modifier les vues générées par Play. Nous voulons réaliser une &amp;#8220;single-page&amp;#8221; application et pour cela, notre url racine doit pointer sur une page principale qui contiendra le chargement de toutes nos ressources et incluera la balise &lt;code&gt;ng-view&lt;/code&gt; d&amp;#8217;AngularJS. Pour cela, j&amp;#8217;ai édité le fichier &amp;#8220;main.scala.html&amp;#8221; comme vous pouvez le voir ici : &lt;a href=&quot;https://github.com/blogsamples/angularjs-play21-html5-routing/blob/master/app/views/main.scala.html&quot;&gt;https://github.com/blogsamples/angularjs-play21-html5-routing/blob/master/app/views/main.scala.html&lt;/a&gt; et j&amp;#8217;ai ajouté la route Play suivante :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;GET     /                           controllers.Application.main(any = &quot;none&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ainsi qu&amp;#8217;une nouvelle &lt;code&gt;Action&lt;/code&gt; dans le controller Application :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;def main(any: String) = Action {&amp;#x000A;  Ok(views.html.main())&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Attendez&amp;#8230; Pourquoi y a-t-il un paramètre de type String dans la méthode main ? Et pourquoi lui passe-t-on in valeur par défault &lt;code&gt;any = &quot;none&quot;&lt;/code&gt; ? Cela semble assez inutile&amp;#8230; C&amp;#8217;est pas faux. J&amp;#8217;expliquerai plus tard le pourquoi du comment de ce paramètre, juste ignorez le pour le moment. Nous avons donc notre page principale. Ajoutons maintenant du contenu à la page d&amp;#8217;accueil, laquelle est définie via &lt;code&gt;$routeProvider.when(&quot;/&quot;, ...)&lt;/code&gt; qui pointe sur &lt;code&gt;/views/index&lt;/code&gt;. Nous avons donc besoin d&amp;#8217;une route Play pour cela&amp;#8230; mais avant, parlons un peu de toutes ces routes.&lt;/p&gt;
&lt;h3&gt;Routes, routes, routes&amp;#8230;&lt;/h3&gt;
&lt;p&gt;En même temps que notre code s&amp;#8217;enrichit, on remarquera que le terme &amp;#8220;route&amp;#8221; est appliqué dans différents contextes. Il est très important de bien comprendre cette notion. Les routes Play, qui sont définies dans le fichier&lt;code&gt;conf/routes&lt;/code&gt;, sont le socle de votre application. C&amp;#8217;est elles qui vont répondre aux requêtes &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; et retourner le code &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; ou n&amp;#8217;importe quoi d&amp;#8217;autre. Mais vous, en tant que développeur, serez le seul à les connaitre. Les utilisateurs de votre application, eux, ne verront et n&amp;#8217;utiliseront que les routes AngularJS qui sont définies dans votre module via le service &lt;code&gt;$routeProvider&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;L&amp;#8217;idée est que lorsqu&amp;#8217;un utilisateur arrive sur votre site, il va utiliser le routing d&amp;#8217;AngularJS qui lui-même va utiliser les routes Play pour charger le template (= le contenu) de la page. Dans ce cas, pourquoi ne pas utiliser les mêmes urls pour à la fois AngularJS et Play ? Dans le cas de l&amp;#8217;url racine, la réponse est évidente : la route &amp;#8220;/&amp;#8221; dans Play est déjà utilisée pour servir la page principale. D&amp;#8217;accord, mais dans un cas plus général, est-ce qu&amp;#8217;on ne pourrait pas avoir quelque chose de la forme :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;$routeProvider.when(&quot;/page&quot;, {&amp;#x000A;  templateUrl: &quot;/page&quot;,&amp;#x000A;  controller: &quot;PageCtrl&quot;&amp;#x000A;})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et non, on ne peut pas. Enfin, c&amp;#8217;est un peu un mensonge&amp;#8230; vous pourriez faire cela, et ça fonctionnerait si votre utilisateur arrivait &lt;strong&gt;toujours&lt;/strong&gt; sur la page principale en premier lieu. En faisant cela, il chargerait tout le routing d&amp;#8217;AngularJS et, ensuite, quand il irait sur l&amp;#8217;url &amp;#8220;/page&amp;#8221;, AngularJS se chargerait d&amp;#8217;appeler la route Play &amp;#8220;/page&amp;#8221; et afficherait ainsi le bon contenu. Alors quel est le problème ? Si votre utilisateur arrivait &lt;strong&gt;directement&lt;/strong&gt; sur l&amp;#8217;url &amp;#8220;/page&amp;#8221;, parce qu&amp;#8217;il aurait par exemple cliqué sur un lien depuis un autre site pointant directement sur &amp;#8220;/page&amp;#8221; dans votre site, et bien dans ce cas, le routing AngularJS ne serait pas du tout chargé&amp;#8230; Et ça c&amp;#8217;est mal parce que cela voudrait dire que c&amp;#8217;est directement la route Play &amp;#8220;/page&amp;#8221; qui sera chargée, affichant le contenu de la page de manière brute sans aucune ressource JavaScript ou &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;. Gros fail.&lt;/p&gt;
&lt;p&gt;Afin d&amp;#8217;éviter cela, j&amp;#8217;ai opté pour quelques conventions. Il n&amp;#8217;y a rien d&amp;#8217;officiel bien entendu, vous pouvez utiliser les votres, la seule chose importante étant que les routes AngularJS et les routes Play ne doivent &lt;strong&gt;jamais&lt;/strong&gt; être égales. Ma solution est de préfixer toutes les routes Play qui servent du &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; par &amp;#8220;/views/&amp;#8221;, toutes celles qui servent du &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; par &amp;#8220;/api/&amp;#8221; et, comme c&amp;#8217;est le cas par défaut, toutes celles qui servent des ressources par &amp;#8220;/assets/&amp;#8221;. Je peux donc maintenant utiliser toutes les routes que je veux dans AngularJS tant qu&amp;#8217;elles ne débutent pas par un de ces préfixes.&lt;/p&gt;
&lt;p&gt;Bien entendu, cela ne fait que déporter le problème. Maintenant, si un utilisateur arrive directement sur &amp;#8220;/page&amp;#8221;, il aura une grosse erreur orange de Play lui disant que la route n&amp;#8217;existe pas. C&amp;#8217;est exactement la même chose que précédemment : comme le routing AngularJS n&amp;#8217;est pas encore chargé, c&amp;#8217;est le routing Play qui essaye de s&amp;#8217;occuper de la requête mais comme il n&amp;#8217;y a plus de route &amp;#8220;/page&amp;#8221; dans Play, ça plante.&lt;/p&gt;
&lt;p&gt;Alors quoi ? Ca ne servait à rien de faire des routes différentes au final ? Pas de panique, j&amp;#8217;ai une autre astuce à vous proposer ! Il s&amp;#8217;agit de rediriger toutes les routes inconnues vers la page principale. Ce faisant, si l&amp;#8217;utilisateur arrive directement sur l&amp;#8217;url &amp;#8220;/page&amp;#8221;, Play va dire &lt;span class=&quot;talk red&quot;&gt;&amp;#8220;Hey, je ne connais pas cette route, va sur la page principale&amp;#8221;&lt;/span&gt;, et l&amp;#8217;utilisateur va donc être redirigé sur la page principale, et c&amp;#8217;est alors que tout le routing AngularJS va être chargé et notre incroyable AngularJS va pouvoir s&amp;#8217;exclamer &lt;span class=&quot;talk blue&quot;&gt;&amp;#8220;Hey, moi je connais cette route, et d&amp;#8217;ailleurs j&amp;#8217;ai besoin du template /views/page pour l&amp;#8217;afficher&amp;#8221;&lt;/span&gt;, ce à quoi Play va répondre &lt;span class=&quot;talk red&quot;&gt;&amp;#8220;Ah ouais, je peux te filer /views/page, voici le code &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; à afficher&amp;#8221;&lt;/span&gt;, et votre utilisateur va ainsi afficher le bon contenu pour &amp;#8220;/page&amp;#8221;, et ce même s&amp;#8217;il arrive directement sur cette url.&lt;/p&gt;
&lt;p&gt;Une autre question ? Pourquoi ne pas avoir utilisé cette astuce tout à l&amp;#8217;heure et ainsi pouvoir avoir les mêmes routes pour AngularJS et Play ? Parce qu&amp;#8217;il est important que l&amp;#8217;astuce ne s&amp;#8217;applique qu&amp;#8217;aux routes inconnues de Play. En effet, on ne peut pas rediriger une route Play existante vers la page principale puisqu&amp;#8217;elle a déjà son propre contenu à retourner. En utilisant des routes différentes entre AngularJS et Play, on peut ainsi considérer toutes les routes inconnues dans Play comme étant les routes AngularJS et les rediriger vers la page principale pour s&amp;#8217;assurer que le routing AngularJS sera à même de les gérer. Pour faire cela, on a juste besoin de rajouter cette route à la toute fin du ficher de routes de Play :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;GET     /*any                       controllers.Application.main(any)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maintenant, vous devriez comprendre pourquoi nous avions un paramètre &lt;code&gt;any: String&lt;/code&gt; pour notre page principale précédemment.&lt;/p&gt;
&lt;h3&gt;Premières pages&lt;/h3&gt;
&lt;p&gt;Assez de théorie, créons quelques vraies pages ! Commençons par deux simples pages en créant les fichiers &amp;#8220;page1.scala.html&amp;#8221; et &amp;#8220;page2.scala.html&amp;#8221; avec un contenu minimaliste au possible (voir le code source, j&amp;#8217;utilise un template pour rester &lt;span class=&quot;caps&quot;&gt;DRY&lt;/span&gt; au niveau du titre et du menu mais c&amp;#8217;est pas vraiment important), puis ajoutons les routes Play (avec un prefix &amp;#8220;/views/&amp;#8221; comme indiqué ci-dessus) ainsi que les méthodes dans notre controller Application :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;@()&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;@template() {&amp;#x000A;  &amp;lt;h2&amp;gt;Page1&amp;lt;/h2&amp;gt;&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;GET     /views/page1                controllers.Application.page1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;def page1 = Action {&amp;#x000A;  Ok(views.html.page1())&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et bien sur le routing AngularJS correspondant :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;.when(&quot;/page1&quot;, {&amp;#x000A;  templateUrl: &quot;/views/page1&quot;&amp;#x000A;})&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C&amp;#8217;est tout. On peut maintenant créer des liens avec la balise &lt;code&gt;a&lt;/code&gt; pour pointer sur l&amp;#8217;url &amp;#8220;/page1&amp;#8221; et AngularJS se chargera de faire le reste, chargeant le template &amp;#8220;/views/page1&amp;#8221; via la route Play correspondante qui va retourner le code &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; généré via notre template Scala. Pas si mal n&amp;#8217;est ce pas ? L&amp;#8217;url est correct : http://localhost:9000/page1, vous pouvez utiliser le bouton retour de votre navigateur pour revenir à la page précédente, pas de hashbang tout moche, tout en Ajax dans une application &amp;#8220;single-page&amp;#8221;.&lt;/p&gt;
&lt;h3&gt;Gérer des paramètres dans les urls&lt;/h3&gt;
&lt;p&gt;Bon. Nous avons nos urls qui fonctionnent en utilisant l&amp;#8217;API History grâce au mode HTML5 du $routeProvider d&amp;#8217;AngularJS. C&amp;#8217;est déjà pas mal. Mais il ne s&amp;#8217;agit que d&amp;#8217;urls fixes. Que se passerait-il si nous voulions introduire des paramètres dynamiques au sein de celles-ci ? Un peu comme faire du &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt;, avec des urls comme &amp;#8220;/colors/1&amp;#8221; et &amp;#8220;/colors/2&amp;#8221; si notre application gère des couleurs (oui, pourquoi pas ?). Est-ce que cela va être facile ? On pourrait le penser, après tout, AngularJS et Play savent tous les deux gérer de tels paramètres dans leurs urls. On pourrait tenter un truc comme :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;.when(&quot;/colors/:id&quot;, {&amp;#x000A;  templateUrl: &quot;/views/color/:id&quot;,&amp;#x000A;  controller: &quot;ColorCtrl&quot;&amp;#x000A;})&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;GET     /views/color/:id             controllers.Application.color(id: String)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ou pas&amp;#8230; En pratique, le &amp;#8220;templateUrl&amp;#8221; d&amp;#8217;AngularJS ne gère pas les paramètres dans son url. Et bien entendu, utiliser &lt;code&gt;templateUrl: &quot;/views/color&quot;&lt;/code&gt; ne va passer aucun paramètre à notre route Play. Pas de bol&amp;#8230;&lt;/p&gt;
&lt;p&gt;En réalité, ce n&amp;#8217;est pas vraiment un problème. Il faut juste revenir aux fondamentaux d&amp;#8217;AngularJS : ce n&amp;#8217;est pas à Play de gérer les données dans ses Action, c&amp;#8217;est AngularJS qui domine le monde (enfin, l&amp;#8217;application du moins), et vous n&amp;#8217;avez donc pas besoin de paramètres dans votre code Scala, faites juste confiance à AngularJS. Après, on est d&amp;#8217;accord qu&amp;#8217;il va nous falloir un moyen de charger les bonnes données selon la valeur de l&amp;#8217;url. Et c&amp;#8217;est d&amp;#8217;ailleurs le role des controllers AngularJS. C&amp;#8217;est pour cela qu&amp;#8217;il existe un &amp;#8220;ColorCtrl&amp;#8221; juste à côté de notre templateUrl. Et devinez quoi, les controllers AngularJS savent récupérer les paramètres au sein de vos urls. Voici comment faire :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;app.controller(&quot;ColorCtrl&quot;, [&quot;$scope&quot;, &quot;$routeParams&quot;, function($scope, $routeParams) {&amp;#x000A;  // Thanks to scope inheritance, we can access the &quot;db&quot; from the AppCtrl scope&amp;#x000A;  $scope.color = $scope.db[$routeParams.id];&amp;#x000A;  if (!$scope.color) {&amp;#x000A;    $scope.msg = &quot;There is no color for id &quot;+$routeParams.id;&amp;#x000A;  } else {&amp;#x000A;    $scope.msg = undefined;&amp;#x000A;  }&amp;#x000A;}])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et juste pour le fun, j&amp;#8217;ai défini la fausse base de données dans le controller &amp;#8220;AppCtrl&amp;#8221; :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;app.controller(&quot;AppCtrl&quot;, [&quot;$scope&quot;, function($scope) {&amp;#x000A;  $scope.db = {&amp;#x000A;    1: {&amp;#x000A;      name: &quot;black&quot;,&amp;#x000A;      hex: &quot;000000&quot;&amp;#x000A;    },&amp;#x000A;    2: {&amp;#x000A;      name: &quot;white&quot;,&amp;#x000A;      hex: &quot;FFFFFF&quot;&amp;#x000A;    }&amp;#x000A;  };&amp;#x000A;}]);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comme on peut le voir, en utilisant le service &lt;code&gt;$routeParams&lt;/code&gt;, on peut récupérer le paramètre de l&amp;#8217;url et charger la bonne couleur dans le &lt;code&gt;$scope&lt;/code&gt;. Au final, il ne reste plus qu&amp;#8217;à afficher cela dans notre vue en utilisant le data-binding d&amp;#8217;AngularJS :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;@()&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;@template() {&amp;#x000A;  &amp;lt;div data-ng-show=&quot;msg&quot;&amp;gt;&amp;#x000A;    &amp;lt;h2&amp;gt;{{msg}}&amp;lt;/h2&amp;gt;&amp;#x000A;  &amp;lt;/div&amp;gt;&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;  &amp;lt;div data-ng-hide=&quot;msg&quot;&amp;gt;&amp;#x000A;    &amp;lt;h2&amp;gt;Color {{color.name}}: # {{color.hex}}&amp;lt;/h2&amp;gt;&amp;#x000A;  &amp;lt;/div&amp;gt;&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et voilà ! Vous pouvez maintenant afficher différentes données selon les paramètres dans vos urls (et au passage également un message d&amp;#8217;erreur dans le cas où l&amp;#8217;url ne correspond à aucune donnée). Pas si mal n&amp;#8217;est ce pas ?&lt;/p&gt;
&lt;h3&gt;Vous en voulez plus ?&lt;/h3&gt;
&lt;p&gt;Encore en train de lire ? Vous devriez déjà être en mesure de faire ce dont vous avez besoin. Mais si vous le souhaitez, on peut aborder un exemple un peu plus complexe qui utiliserait le service &lt;code&gt;$resource&lt;/code&gt; d&amp;#8217;AngularJS tout en servant du &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; depuis Play comme le ferait une &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt;. Ca vous tente ? Ok, faisons cela. En premier lieu, on va créer un nouveau controller &amp;#8220;Users&amp;#8221; qui aura deux méthodes &amp;#8220;all()&amp;#8221; et &amp;#8220;find(id: String)&amp;#8221; qui retourneront réciproquement un Array de &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; et un objet &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; correspondant à la liste de nos utilisateurs et à un utilisateur en particulier basé sur son id. Je ne vais pas utiliser une vraie base de données mais un truc comme MongoDB irait assez bien dans ce cas. Voici le code :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;package controllers&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;import play.api._&amp;#x000A;import play.api.mvc._&amp;#x000A;import play.api.libs.json._&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;object Users extends Controller {&amp;#x000A;  val db = Json.arr(&amp;#x000A;    Json.obj( &quot;id&quot; -&amp;gt; &quot;1&quot;, &quot;name&quot; -&amp;gt; &quot;John&quot; ),&amp;#x000A;    Json.obj( &quot;id&quot; -&amp;gt; &quot;2&quot;, &quot;name&quot; -&amp;gt; &quot;Suzanne&quot; )&amp;#x000A;  )&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;  def all() = Action {&amp;#x000A;    Ok(db)&amp;#x000A;  }&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;  def find(id: String) = Action {&amp;#x000A;    Ok(db.value.filter(v =&amp;gt; (v \ &quot;id&quot;).as[JsString].value == id).headOption.getOrElse(new JsUndefined(&quot;&quot;)))&amp;#x000A;  }&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si vous ne comprenez pas complètement le code, vous pouvez lire la documentation de PlayFramework sur comment gérer du &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; dans les requêtes (&lt;a href=&quot;http://www.playframework.com/documentation/2.1.0/ScalaJsonRequests&quot;&gt;http://www.playframework.com/documentation/2.1.0/ScalaJsonRequests&lt;/a&gt;). J&amp;#8217;utilise la nouvelle &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; de Play 2.1 (&lt;a href=&quot;http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.json.package&quot;&gt;http://www.playframework.com/documentation/api/2.1.0/scala/index.html#play.api.libs.json.package&lt;/a&gt;). Nous allons ensuite avoir besoin d&amp;#8217;un controller AngularJS du nom de &amp;#8220;UserCtrl&amp;#8221; qui utilisera le service &lt;code&gt;$resource&lt;/code&gt; pour récupérer les données :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;app.controller(&quot;UserCtrl&quot;, [&quot;$scope&quot;, &quot;$routeParams&quot;, &quot;$resource&quot;, &quot;apiUrl&quot;, function($scope, $routeParams, $resource, apiUrl) {&amp;#x000A;  var Users = $resource(apiUrl + &quot;/users/:id&quot;, {id:&quot;@id&quot;});&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;  if($routeParams.id) {&amp;#x000A;    $scope.user = Users.get({id: $routeParams.id}, function() {&amp;#x000A;      if (!$scope.user.id) {&amp;#x000A;        $scope.msg = &quot;There is no user for id &quot;+$routeParams.id;&amp;#x000A;      } else {&amp;#x000A;        $scope.msg = undefined;&amp;#x000A;      }&amp;#x000A;    });&amp;#x000A;  } else {&amp;#x000A;    $scope.users = Users.query();&amp;#x000A;  }&amp;#x000A;}])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour en apprendre plus sur les possibilités du service $resource d&amp;#8217;AngularJS, n&amp;#8217;hésitez pas à lire &lt;a href=&quot;http://docs.angularjs.org/api/ngResource.$resource&quot;&gt;http://docs.angularjs.org/api/ngResource.$resource&lt;/a&gt;. A quoi correspond cet &amp;#8220;apiUrl&amp;#8221; sorti de nul part ? C&amp;#8217;est une constante que j&amp;#8217;ai défini dans mon application AngularJS :&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;var app = angular.module(&quot;app&quot;, [&quot;ngResource&quot;])&amp;#x000A;  .constant(&quot;apiUrl&quot;, &quot;http://localhost:9000\:9000/api&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;&lt;strong&gt;Pro tip&lt;/strong&gt; Pourquoi est-ce que le port 9000 semble être présent deux fois ? Parce que si nous avions écrit &lt;code&gt;http://localhost:9000/api&lt;/code&gt;, AngularJS aurait interprété cela comme un paramètre dynamique du nom de &amp;#8220;9000&amp;#8221; du fait qu&amp;#8217;il soit place après un caractère &lt;code&gt;:&lt;/code&gt;. Nous avons donc besoin de cette étrange syntaxe pour indiquer à AngularJS qui ne s&amp;#8217;agit pas d&amp;#8217;un paramètre mais bien d&amp;#8217;une valeur fixe dans l&amp;#8217;url.&lt;/div&gt;
&lt;p&gt;Ensuite, nous allons créer notre resource en étendant &amp;#8220;apiUrl&amp;#8221; par notre routing &amp;#8220;/users/:id&amp;#8221;. Cette fois-ci, &amp;#8220;:id&amp;#8221; est un vrai paramètre. Nous pouvons maintenant utiliser les méthodes &amp;#8220;get&amp;#8221; et &amp;#8220;query&amp;#8221; de la resource, lui passant ou non une valeur pour id, dans le but de récupérer notre code &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; et l&amp;#8217;assigner dans le &lt;code&gt;$scope&lt;/code&gt;. Nous aurons également besoin de deux vues Scala : une pour la liste des utilisateurs et une pour le détail d&amp;#8217;un utilisateur.&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;@()&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;@template() {&amp;#x000A;  &amp;lt;h2&amp;gt;Users&amp;lt;/h2&amp;gt;&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;  &amp;lt;ul&amp;gt;&amp;#x000A;    &amp;lt;li data-ng-repeat=&quot;u in users&quot;&amp;gt;&amp;#x000A;      &amp;lt;a data-ng-href=&quot;/users/{{u.id}}&quot;&amp;gt;User# {{u.id}}: {{u.name}}&amp;lt;/a&amp;gt;&amp;#x000A;    &amp;lt;/li&amp;gt;&amp;#x000A;  &amp;lt;/ul&amp;gt;&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;@()&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;@template() {&amp;#x000A;  &amp;lt;div data-ng-show=&quot;msg&quot;&amp;gt;&amp;#x000A;    &amp;lt;h2&amp;gt;{{msg}}&amp;lt;/h2&amp;gt;&amp;#x000A;  &amp;lt;/div&amp;gt;&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettyprint linenums&quot;&gt;  &amp;lt;div data-ng-hide=&quot;msg&quot;&amp;gt;&amp;#x000A;    &amp;lt;h2&amp;gt;User# {{user.id}} {{user.name}}&amp;lt;/h2&amp;gt;&amp;#x000A;  &amp;lt;/div&amp;gt;&amp;#x000A;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et voilà. Nous avons maintenant un listing d&amp;#8217;utilisateurs et pour chacun un lien vers son détail, tout cela grâce à des données &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; récupérées depuis une &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt;.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;&lt;strong&gt;Pro tip&lt;/strong&gt; Au passage, comme nos routes Play sont toutes différentes de nos routes AngularJS, vous pouvez sans soucis les charger directement dans votre navigateur. Comme la redirection d&amp;#8217;une route inconnue vers la page principale n&amp;#8217;arrive qu&amp;#8217;en toute fin de votre fichier de routing, toutes les véritables routes Play seront chargées avant cette redirection. Si vous avez la démo qui tourne, affichez &lt;a href=&quot;http://localhost:9000/api/users&quot;&gt;http://localhost:9000/api/users&lt;/a&gt; et &lt;a href=&quot;http://localhost:9000/api/users/1&quot;&gt;http://localhost:9000/api/users/1&lt;/a&gt; pour voir votre &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; qui fonctionne sans soucis.&lt;/div&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;J&amp;#8217;espère que cet article vous aidera à démarrer votre prochaine géniale application en utilisant les incroyables outils que sont AngularJS et PlayFramework. Les prochaines étapes, le cas échéant, pourraient être d&amp;#8217;en apprendre plus sur la nouvelle &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; de PlayFramework afin d&amp;#8217;avoir du &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; typé (si je puis dire). Vous pourriez aussi utiliser une vraie base de données. Un choix comme &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt; serait intéressant car cela permettrait de stocker directement le &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; tel quel, et vous pourriez intéragir avec en utilisant un driver comme &lt;a href=&quot;http://reactivemongo.org/&quot;&gt;ReactiveMongo&lt;/a&gt; si vous voulez emprunter le chemin de l&amp;#8217;asynchrone complet pour des applications non-bloquantes.&lt;/p&gt;
&lt;p&gt;Cela ne dépend que de vous !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://pauldijou.fr/blog/2012/11/27/some-pocs-to-share.html</id>
    <title>Some POCs to share</title>
    <updated>2013-02-18T22:36:04+01:00</updated>
    <published>2012-11-27T00:00:00Z</published>
    <link href='http://pauldijou.fr/blog/2012/11/27/some-pocs-to-share.html' rel='alternate' type='text/html' />
    <category term='en'></category>
    <category term='fr'></category>
    <category term='angular'></category>
    <category term='coffeescript'></category>
    <category term='yeoman'></category>
    <summary>
      
English version
Version Française



Some POCs
Hi there,
I&#8217;ve been a bit busy lately but I&#8217;m back on game. Looking for a job in Paris, I&#8217;ve been asked to do some code over more or less funny subjects and now that it&#8217;s done, I will share them, maybe it could help people to see some code around some technologies. It&#8217;s not at all perfect code, more experiments I&#8217;ve done.
Mowing is mainly a CoffeeScript project about giving orders to some automatic mowers and see the result. My goal was to test that new syntax around JavaScript and I have to admit it&#8217;s quite cool. You...
    </summary>
    <content type='html'>
      &lt;ul class=&quot;nav nav-tabs&quot;&gt;
&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#2012-11-27-some-pocs-to-share-en&quot; data-toggle=&quot;tab&quot;&gt;English version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2012-11-27-some-pocs-to-share-fr&quot; data-toggle=&quot;tab&quot;&gt;Version Française&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot;&gt;
&lt;div class=&quot;tab-pane active&quot; id=&quot;2012-11-27-some-pocs-to-share-en&quot;&gt;
&lt;h3&gt;Some POCs&lt;/h3&gt;
&lt;p&gt;Hi there,&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been a bit busy lately but I&amp;#8217;m back on game. Looking for a job in Paris, I&amp;#8217;ve been asked to do some code over more or less funny subjects and now that it&amp;#8217;s done, I will share them, maybe it could help people to see some code around some technologies. It&amp;#8217;s not at all perfect code, more experiments I&amp;#8217;ve done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mowing&lt;/strong&gt; is mainly a &lt;code&gt;CoffeeScript&lt;/code&gt; project about giving orders to some automatic mowers and see the result. My goal was to test that new syntax around JavaScript and I have to admit it&amp;#8217;s quite cool. You can see &lt;a href=&quot;http://pauldijou.fr/mowing/&quot;&gt;the result here&lt;/a&gt; (don&amp;#8217;t over do it too large grids). The source code is &lt;a href=&quot;https://github.com/pauldijou/mowing/&quot;&gt;here on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mowing-java&lt;/strong&gt; is the &lt;code&gt;Java&lt;/code&gt; version of &lt;strong&gt;Mowing&lt;/strong&gt;. So in fact, it&amp;#8217;s nearly the same syntax since you can create class in CoffeeScript but this one runs on a &lt;span class=&quot;caps&quot;&gt;JVM&lt;/span&gt;. &lt;a href=&quot;https://github.com/pauldijou/mowing-java&quot;&gt;See here&lt;/a&gt; for source code.&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;GSearch&lt;/strong&gt; is an &lt;code&gt;AngularJS&lt;/code&gt; application build using &lt;code&gt;Yeoman&lt;/code&gt;. Its goal is to plug on GitHub &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; and allow you to search through repositories and users and display informations and stats about them. &lt;a href=&quot;http://pauldijou.fr/gsearch/&quot;&gt;Here is the result&lt;/a&gt; and &lt;a href=&quot;https://github.com/pauldijou/gsearch/&quot;&gt;go there&lt;/a&gt; for source code.&lt;/p&gt;
&lt;p&gt;Of course, &lt;strong&gt;any feedback&lt;/strong&gt; is welcome! I can be bugs, features, questions, anything&amp;#8230;&lt;/p&gt;
&lt;h3&gt;NigthHacking Tour 2012&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve given a small quicky about &lt;code&gt;RichFaces Bootstrap&lt;/code&gt; and &lt;code&gt;RichFaces 5&lt;/code&gt; on Paris a few weeks ago. In order to share it, this site now has a &lt;a href=&quot;http://pauldijou.fr/slides/&quot;&gt;Slides section&lt;/a&gt; where you will be able to see all my last presentations (well, only one for now&amp;#8230; and in French, sorry).&lt;/p&gt;
&lt;h3&gt;Are you in Paris?&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s finish with a personal note. I will be living in Paris from now and for quite some time. So if you living there or just passing by and want to grab a beer and talk about Java EE, HTML5, RichFaces, or anything cool, just let me now! Also if you are giving conferences or doing dojos or katas in the area, be sure to notice me so I can come to the next one. Thanks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tab-pane&quot; id=&quot;2012-11-27-some-pocs-to-share-fr&quot;&gt;
&lt;h3&gt;Quelques POCs&lt;/h3&gt;
&lt;p&gt;J&amp;#8217;ai été un peu occupé ces derniers temps mais je suis de retour. Pendant ma recherche d&amp;#8217;emploi sur Paris, on m&amp;#8217;a demandé de réaliser quelques démos de code sur des sujets plus ou moins funs. Maintenant que c&amp;#8217;est fait, je me suis dit que je pourrais les partager, peut être que cela pourrait intéresser quelques personnes de voir du code autour de certaines technologies. Ledit code est loin d&amp;#8217;être parfait, il s&amp;#8217;agit plus d&amp;#8217;expériences que j&amp;#8217;ai faites.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mowing&lt;/strong&gt; est principalement réalisé en &lt;strong&gt;CoffeeScript&lt;/strong&gt; et son but est de donner des ordres à des tondeuses automatiques avant de les regarder tondre. L&amp;#8217;intérêt était de tester cette nouvelle syntaxe autour de JavaScript et je dois bien avouer que j&amp;#8217;ai été relativement séduit. Vous pouvez voir &lt;a href=&quot;http://pauldijou.fr/mowing/&quot;&gt;le résultat&lt;/a&gt; (n&amp;#8217;allez pas tout casser avec des grilles trop larges). Le code source est &lt;a href=&quot;https://github.com/pauldijou/mowing&quot;&gt;ici, sur GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mowing-java&lt;/strong&gt; est la version &lt;strong&gt;Java&lt;/strong&gt; de *Mowing&amp;quot;. Au final, c&amp;#8217;est pratiquement la même syntaxe puisque vous pouvez créer des classes en CoffeeScript mais cette version tourne sur la &lt;span class=&quot;caps&quot;&gt;JVM&lt;/span&gt;. Vous pouvez &lt;a href=&quot;https://github.com/pauldijou/mowing-java/&quot;&gt;regarder ici&lt;/a&gt; pour le code source.&lt;/p&gt;
&lt;p&gt;Enfin, &lt;strong&gt;GSearch&lt;/strong&gt; est une application &lt;strong&gt;AngularJS&lt;/strong&gt; organisée grâce à l&amp;#8217;outil &lt;strong&gt;Yeoman&lt;/strong&gt;. Son but est de se connecter aux &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; de GitHub afin de vous permettre d&amp;#8217;effectuer des recherches sur les répertoires et les utilisateurs ainsi qu&amp;#8217;afficher des informations et des statistiques à leur sujet. &lt;a href=&quot;http://pauldijou.fr/gsearch/&quot;&gt;C&amp;#8217;est ici pour le résultat&lt;/a&gt; et &lt;a href=&quot;https://github.com/pauldijou/gsearch/&quot;&gt;plutôt par là&lt;/a&gt; pour le code source.&lt;/p&gt;
&lt;p&gt;Bien entendu, &lt;strong&gt;les retours&lt;/strong&gt; sont les bienvenus, qu&amp;#8217;il s&amp;#8217;agisse de bugs, fonctionnalités, questions, ou n&amp;#8217;importe quoi d&amp;#8217;autre&amp;#8230;&lt;/p&gt;
&lt;h3&gt;NigthHacking Tour 2012&lt;/h3&gt;
&lt;p&gt;J&amp;#8217;ai eu la chance d&amp;#8217;y présenter un petit quicky sur &lt;strong&gt;RichFaces Bootstrap&lt;/strong&gt; et &lt;strong&gt;RichFaces 5&lt;/strong&gt; sur Paris il y a quelques semaines. Afin de partager cela, ce site possède désormais une &lt;a href=&quot;http://pauldijou.fr/slides/&quot;&gt;section Slides&lt;/a&gt; qui contient toutes mes dernières présentations (enfin, seulement celle-ci pour le moment&amp;#8230; mais en français au moins !).&lt;/p&gt;
&lt;h3&gt;Du côté de Paris ?&lt;/h3&gt;
&lt;p&gt;Je vais terminer avec une note personnelle. Il s&amp;#8217;avère que je vais vivre sur Paris à partir de maintenant et pour quelques temps. Donc si vous êtes dans le coin ou juste de passage et que vous voulez boire une bière tout en discutant de Java EE, HTML5, RichFaces ou n&amp;#8217;importe quel autre sujet sympa, n&amp;#8217;hésitez pas à me le faire savoir ! De même, si vous donnez des conférences ou réalisez des dojos ou des katas dans les environs, faites le moi savoir que je puisse venir au prochain. Merci d&amp;#8217;avance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://pauldijou.fr/blog/2012/08/07/news-richfaces-bootstrap.html</id>
    <title>News about RichFaces Bootstrap</title>
    <updated>2013-02-18T22:36:04+01:00</updated>
    <published>2012-08-07T00:00:00Z</published>
    <link href='http://pauldijou.fr/blog/2012/08/07/news-richfaces-bootstrap.html' rel='alternate' type='text/html' />
    <category term='en'></category>
    <category term='fr'></category>
    <category term='richfaces'></category>
    <category term='bootstrap'></category>
    <category term='jquery'></category>
    <summary>
      
English version
Version Française



What&#8217;s new in RichFaces Bootstrap?
Red Alert! The RichFaces Bootstrap project is still under heavy development, tag and attribute names can change at any time and if you find something missing or buggy, there is high chance it&#8217;s not a bug but just hasn&#8217;t been done yet (&#8230; or it&#8217;s a real bug). So only use it for fun and prototype purposes.
Semantic components are a brand new concept. I need to present it first so I can use it when talking next about the new components. Most of the time, for one JSF tag, you have one and only...
    </summary>
    <content type='html'>
      &lt;ul class=&quot;nav nav-tabs&quot;&gt;
&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#2012-08-07-news-richfaces-bootstrap-en&quot; data-toggle=&quot;tab&quot;&gt;English version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2012-08-07-news-richfaces-bootstrap-fr&quot; data-toggle=&quot;tab&quot;&gt;Version Française&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;tab-content&quot;&gt;
&lt;div class=&quot;tab-pane active&quot; id=&quot;2012-08-07-news-richfaces-bootstrap-en&quot;&gt;
&lt;h3&gt;What&amp;#8217;s new in RichFaces Bootstrap?&lt;/h3&gt;
&lt;div class=&quot;alert alert-error&quot;&gt;&lt;strong&gt;Red Alert!&lt;/strong&gt; The RichFaces Bootstrap project is still under heavy development, tag and attribute names can change at any time and if you find something missing or buggy, there is high chance it&amp;#8217;s not a bug but just hasn&amp;#8217;t been done yet (&amp;#8230; or it&amp;#8217;s a real bug). So only use it for fun and prototype purposes.&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Semantic components&lt;/strong&gt; are a brand new concept. I need to present it first so I can use it when talking next about the new components. Most of the time, for one &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; tag, you have one and only one &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; renderer, it&amp;#8217;s a oneToOne relation (according to &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; naming convention). It seems logical: for one component, you should always have (nearly) the same generated &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; code. But with HTML5, the web is becoming more semantic and that&amp;#8217;s good. Why not have the same with RichFaces? But before we dive into it, what is &amp;#8220;semantic&amp;#8221;? For a real definition see &lt;a href=&quot;http://en.wikipedia.org/wiki/Semantic_Web&quot;&gt;Wikipedia&lt;/a&gt; but here, we will say it&amp;#8217;s when a component serves a global purpose like being a header or a footer but shouldn&amp;#8217;t always render in the same way, instead the rendered result should depend on the context (like a table header isn&amp;#8217;t the same as a column header).&lt;/p&gt;
&lt;p&gt;With RichFaces, a semantic component is a component &lt;strong&gt;with no renderer&lt;/strong&gt;! Yeah yeah, if you use a semantic component on its own, it will throw an exception because it doesn&amp;#8217;t know how to render itself. The concept is that a semantic component will ask its parent in the &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; tree: &amp;#8220;Hey dad, do you know how I can render myself?&amp;#8221;, if it knows, the parent will provide the correct renderer to the semantic component which will render it, otherwise, the semantic component will ask one level higher the same question, and so on until the root element. If no one answers yes to the question, it will throw an exception. That means we also have components that accept semantic components in order to provide them the correct renderer.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take a concrete example. The &lt;strong&gt;modal&lt;/strong&gt; component in RichFaces Bootstrap can support 3 semantic components: a header, a body and a footer. You can see that by looking at which interfaces the &lt;code&gt;AbstractModal&lt;/code&gt; implements (see &lt;a href=&quot;https://github.com/richfaces/sandbox/blob/develop/bootstrap/ui/src/main/java/org/richfaces/bootstrap/component/AbstractModal.java#L49&quot;&gt;GitHub&lt;/a&gt;). All interfaces with the syntax &lt;code&gt;Render{1}Capable&lt;/code&gt; are components that support the semantic component &lt;code&gt;{1}&lt;/code&gt;, so here, it&amp;#8217;s &lt;strong&gt;headerFacet&lt;/strong&gt;, &lt;strong&gt;bodyFacet&lt;/strong&gt; and &lt;strong&gt;footerFacet&lt;/strong&gt;. And if you look at the rest of the code of the &lt;code&gt;AbstractModal&lt;/code&gt;, you will see methods with the syntax &lt;code&gt;public String get{1}RendererType()&lt;/code&gt; which are the methods giving the right renderer to use by semantic components. Inside a &lt;strong&gt;modal&lt;/strong&gt;, the &lt;strong&gt;headerFacet&lt;/strong&gt; component will render as a &lt;code&gt;div class=&quot;modal-header&quot;&lt;/code&gt; according to &lt;a href=&quot;https://github.com/richfaces/sandbox/blob/develop/bootstrap/ui/src/main/templates/org/richfaces/bootstrap/modalHeaderFacet.template.xml&quot;&gt;the renderer provided&lt;/a&gt; by the &lt;strong&gt;modal&lt;/strong&gt;. But inside another component, it could have been totally different &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; code.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;&lt;strong&gt;Pro tip&lt;/strong&gt; If you take a more accurate look to all current semantic components, you will see that they all follow the same syntax: first their purpose (like &lt;strong&gt;header&lt;/strong&gt; or &lt;strong&gt;footer&lt;/strong&gt;) and then a generic &lt;strong&gt;Facet&lt;/strong&gt; suffix. That give us the full list of semantic components: headerFacet, bodyFacet, footerFacet, menuFacet and positionFacet. Why using a suffix? Because we want to keep the no-suffix name for the real &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; tag. The RichFaces &lt;strong&gt;header&lt;/strong&gt; tag will always generate the &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; &lt;strong&gt;header&lt;/strong&gt; tag like a classic &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; tag (the oneToOne relation) but the &lt;strong&gt;headerFacet&lt;/strong&gt; tag is a semantic component so it can generate anything depending of the context. Also, it makes it easier to see if a RichFaces component is a semantic one or not by just looking at its name.&lt;/div&gt;
&lt;div class=&quot;alert&quot;&gt;&lt;strong&gt;Warning&lt;/strong&gt; Even if the suffix is &lt;strong&gt;Facet&lt;/strong&gt; keep in mind that semantic components &lt;strong&gt;are not facets&lt;/strong&gt;, they don&amp;#8217;t have the same limitations: they have attributes, you can use the same semantic component several time inside the same parent, a semantic component doesn&amp;#8217;t have to be a direct child of a component supporting it and a semantic component can have several children.&lt;/div&gt;
&lt;p&gt;Now, let&amp;#8217;s dive into the new components. &lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/component/input/&quot;&gt;input&lt;/a&gt; tag is a basic input with all Bootstrap features like prepend and append and several new attributes in order to support new &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; features. By the way, this &lt;strong&gt;input&lt;/strong&gt; centralizes and supports all HTML5 input types, you will no longer need one &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; component for each type, just use the &lt;code&gt;type&lt;/code&gt; attribute (default is &amp;#8220;text&amp;#8221; of course).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/component/modal/&quot;&gt;modal&lt;/a&gt; is like &lt;code&gt;rich:modalPanel&lt;/code&gt; or &lt;code&gt;rich:popupPanel&lt;/code&gt;, it will display a popup layout on top of your page, potentially covering your page with a dark layer to block any action outside of the modal. The default usage of the modal has a header, specified by using &lt;code&gt;header&lt;/code&gt; attribute or &lt;code&gt;header&lt;/code&gt; facet, a footer specified with &lt;code&gt;footer&lt;/code&gt; facet and a &lt;code&gt;body&lt;/code&gt; which will be the code inside the modal component. Concretely, what&amp;#8217;s happening is that each part, header &amp;#8211; body &amp;#8211; footer, will be wrapped inside a &lt;code&gt;div class=&quot;modal-xxx&quot;&lt;/code&gt; where &amp;#8220;xxx&amp;#8221; is the name of the section in order to align with the Bootstrap syntax. Using footer as a facet might be limiting because you cannot have &lt;strong&gt;a form inside the modal&lt;/strong&gt; wrapping both body and footer because footer, as a facet, will always be outside. The default usage should be &lt;strong&gt;the modal inside the form&lt;/strong&gt; since you will probably not need several forms inside a modal most of the time.&lt;/p&gt;
&lt;p&gt;What if that isn&amp;#8217;t enough? What if you do want the form inside and not outside? Even if this behavior should be enough in most of use-cases, you can still fully customize your modal the way you want! The moment you use one of the following semantic components, headerFacet &amp;#8211; bodyFacet &amp;#8211; footerFacet, it considers you are doing a custom modal and it will not generate the &lt;code&gt;div class=&quot;modal-xxx&quot;&lt;/code&gt; anymore. I&amp;#8217;m talking about the modal itself. Because the semantic components will generate the corresponding &lt;code&gt;div&lt;/code&gt;. However using real components and not facets will allow you to put both bodyFacet and footerFacet inside a form for example.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/component/tooltip/&quot;&gt;tooltip&lt;/a&gt; and &lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/component/popover/&quot;&gt;popover&lt;/a&gt; are two new ways to display bonus info when the mouse moves over particular content. The first one is for small texts and labels only, the second one can support custom content and a title. Right now, content can only be text but we are planning to improve this.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;&lt;strong&gt;Pro tip&lt;/strong&gt; Even if &lt;strong&gt;popover&lt;/strong&gt; content only supports text, you can still put some light &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; in it. You just need to escape chevrons with &lt;code&gt;&amp;amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;amp;gt;&lt;/code&gt;.&lt;/div&gt;
&lt;p&gt;Finally, &lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/component/orderingList/&quot;&gt;orderingList&lt;/a&gt; is the new RichFaces ordering list to allow you to re-arrange the order of some items. It already supports single drag-and-drop, multiple selection and &amp;#8220;table&amp;#8221; layout. Next features will be multiple drag-and-drop, maybe keyboard selection using &lt;span class=&quot;caps&quot;&gt;SHIFT&lt;/span&gt; (&lt;span class=&quot;caps&quot;&gt;CTRL&lt;/span&gt; is already supported). Thanks to Brian work, it is the first component mixing the power of the jQuery UI widget factory with Bootstrap design. If we can do it once, we can do it for lots of other widgets!&lt;/p&gt;
&lt;p&gt;New EL functions are also there. &lt;a href=&quot;https://github.com/richfaces/components/blob/develop/misc/ui/src/main/java/org/richfaces/function/RichFunction.java#L156&quot;&gt;jQuery&lt;/a&gt; and &lt;a href=&quot;https://github.com/richfaces/components/blob/develop/misc/ui/src/main/java/org/richfaces/function/RichFunction.java#L126&quot;&gt;jQuerySelector&lt;/a&gt; are part of RichFaces Core but have been created to help RichFaces Bootstrap. They will allow you to retrieve a jQuery object or the jQuery selector from a server-side &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; id.&lt;/p&gt;
&lt;p&gt;Next are more &lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/component/el/&quot;&gt;specific Bootstrap EL functions&lt;/a&gt;. If you have take a look at Bootstrap JavaScript &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;, you might have noticed that lots of JavaScript components have a set of functions with the following syntax: &lt;code&gt;$(sel).compName('singleParameter');&lt;/code&gt;, like for example: &lt;code&gt;$('#myModal').modal('show');&lt;/code&gt; for a &lt;strong&gt;modal&lt;/strong&gt;. The first approach to use it in &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; component was to use the previous &lt;strong&gt;jQuery&lt;/strong&gt; function like: &lt;code&gt;onclick=&quot;#{rich:jQuery( 'myModal' )}.modal('show')&quot;&lt;/code&gt;. It works fine but obviously, that wasn&amp;#8217;t enough for Lukas since he built a different approach from scratch.&lt;/p&gt;
&lt;p&gt;The new concept is that the &lt;code&gt;compName&lt;/code&gt; part of the call is nearly useless if you can retrieve it from the component returned from the jQuery call. In the previous example, if you know that &lt;code&gt;#{rich:jQuery('myModal')}&lt;/code&gt; is actually a &lt;strong&gt;modal&lt;/strong&gt; component, then you also know that you will have to call the &lt;strong&gt;modal&lt;/strong&gt; function, only remains with importance the &lt;strong&gt;singleParameter&lt;/strong&gt;. So here is the new syntax: &lt;code&gt;#{b:singleParameter(sel)}&lt;/code&gt;. The previous example becomes: &lt;code&gt;onclick=&quot;#{b:show('myModal')}&quot;&lt;/code&gt;. Much more concise and readable, isn&amp;#8217;t it? Right now, RichFaces Bootstrap supports &lt;strong&gt;show&lt;/strong&gt;, &lt;strong&gt;hide&lt;/strong&gt; and &lt;strong&gt;toggle&lt;/strong&gt; functions but others will follow soon.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;&lt;strong&gt;Pro tip&lt;/strong&gt; Want to know how the EL function retrieves the name of the component? Easy. When the selector will be used to find the &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; component, it will find a &lt;strong&gt;UIComponent&lt;/strong&gt; (like a &lt;strong&gt;UIModal&lt;/strong&gt;) which, according to RichFaces &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; design, will extend an &lt;strong&gt;AbstractComponent&lt;/strong&gt; (like &lt;a href=&quot;https://github.com/richfaces/sandbox/blob/develop/bootstrap/ui/src/main/java/org/richfaces/bootstrap/component/AbstractModal.java&quot;&gt;AbstractModal&lt;/a&gt;). And if the &lt;strong&gt;AbstractComponent&lt;/strong&gt; supports Bootstrap EL functions, it will be annotated with &lt;code&gt;@BootstrapJSPlugin&lt;/code&gt; (like at &lt;a href=&quot;https://github.com/richfaces/sandbox/blob/develop/bootstrap/ui/src/main/java/org/richfaces/bootstrap/component/AbstractModal.java#L43&quot;&gt;line 43 of AbstractModal&lt;/a&gt;) and it&amp;#8217;s the &lt;code&gt;name&lt;/code&gt; attribute of that annotation that will give us the &lt;code&gt;componentName&lt;/code&gt;. As I told you, really easy!&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;LESS&lt;/span&gt; support&lt;/strong&gt; is no longer a dream (for those who doesn&amp;#8217;t know &lt;span class=&quot;caps&quot;&gt;LESS&lt;/span&gt;, it&amp;#8217;s a more powerful way to write &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, see the &lt;a href=&quot;http://lesscss.org/&quot;&gt;project website&lt;/a&gt; for more infos). Thanks to Lukas&amp;#8217; awesome work, a first prototype of that feature is already working. You can &lt;a href=&quot;http://rik-ansikter.blogspot.fr/2012/08/jsf-meets-skinning-awesomeness-of-less.html&quot;&gt;read his post&lt;/a&gt; to know more about that. There is still work to do but it&amp;#8217;s an incredible starting point.&lt;/p&gt;
&lt;h3&gt;What&amp;#8217;s coming?&lt;/h3&gt;
&lt;p&gt;Want more? Great, because we have tons of other plans to improve RichFaces!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New build design&lt;/strong&gt; is currently under &lt;a href=&quot;https://community.jboss.org/wiki/RichFaces43BuildRedesign&quot;&gt;discussion on RichFaces wiki&lt;/a&gt; so be sure to take a look and give feedback if you care about the future of RichFaces.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theming all current components&lt;/strong&gt; from RichFaces Core with Bootstrap design is planned so you can use both projects at the same time.&lt;/p&gt;
&lt;p&gt;The orderingList is just a beginning. &lt;strong&gt;More jQuery UI widget factory based components&lt;/strong&gt; are incoming. Feel free to comment &lt;a href=&quot;https://community.jboss.org/thread/200343&quot;&gt;here&lt;/a&gt; to propose the ones you would like to see supported in RichFaces Bootstrap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;tab-pane&quot; id=&quot;2012-08-07-news-richfaces-bootstrap-fr&quot;&gt;
&lt;h3&gt;Quoi de neuf au sein de RichFaces Bootstrap ?&lt;/h3&gt;
&lt;div class=&quot;alert alert-error&quot;&gt;&lt;strong&gt;Alerte rouge !&lt;/strong&gt; Le projet RichFaces Bootstrap est encore en pleine phase de développement. Les noms des balises et de leurs attributs peuvent changer à tout moment et si vous trouvez un bug ou que quelque chose manque, il y a de fortes changes que cela n&amp;#8217;ait juste pas été encore fait (&amp;#8230; ou alors c&amp;#8217;est vraiment un bug). N&amp;#8217;utilisez ce projet qu&amp;#8217;à des fins de prototypage ou pour le plaisir.&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Les composants sémantiques&lt;/strong&gt; représentent un tout nouveau concept. Je me dois de les présenter en premier car j&amp;#8217;en aurais ensuite besoin quand je vous parlerai des nouveaux composants. La plupart du temps, pour un composant &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;, vous avez un et un seul code &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; généré, il s&amp;#8217;agit d&amp;#8217;une relation oneToOne (si l&amp;#8217;on devait utiliser le vocabulaire de la norme &lt;span class=&quot;caps&quot;&gt;JPA&lt;/span&gt;). C&amp;#8217;est tout à fait logique : pour un composant, vous devriez toujours aboutir au même code &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; généré (à quelques détails de configuration prêt). Mais avec HTML5, le web devient un peu plus semantique et c&amp;#8217;est tant mieux. Alors pourquoi ne pas avoir la même chose dans RichFaces ? Mais avant d&amp;#8217;aller plus loin, qu&amp;#8217;est-ce qu&amp;#8217;être &amp;#8220;sémantique&amp;#8221; ? Pour une véritable définition, voyez &lt;a href=&quot;http://fr.wikipedia.org/wiki/Web_s%C3%A9mantique&quot;&gt;Wikipédia&lt;/a&gt; (la &lt;a href=&quot;http://en.wikipedia.org/wiki/Semantic_Web&quot;&gt;version anglaise&lt;/a&gt; est peut être préférable cela dit), mais dans notre cas, nous allons dire qu&amp;#8217;il s&amp;#8217;agit de composants qui ont une fonctionnalité globale, comme être un &amp;#8220;header&amp;#8221; ou un &amp;#8220;footer&amp;#8221;, et ne devraient pas toujours générer le même code &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; mais au contraire dépendre leur contexte (tout comme un &amp;#8220;header&amp;#8221; de table n&amp;#8217;est pas pareil qu&amp;#8217;un &amp;#8220;header&amp;#8221; de colonne).&lt;/p&gt;
&lt;p&gt;Dans RichFaces, un composant sémantique est un composant &lt;strong&gt;qui n&amp;#8217;a pas de renderer&lt;/strong&gt;! Oui oui, si vous utilisez un composant sémantique en solitaire, il vous lancera une exception à la figure car il ne sait pas quoi générer comme code &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; par lui même. Le concept est qu&amp;#8217;un composant sémantique doit demander à son composant parent dans l&amp;#8217;arbre &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; la question suivante : &amp;#8220;Hey papa, est-ce que tu sais quel code &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; je dois générer ?&amp;#8221; (ou bien &amp;#8220;Hey papa, est-ce que tu sais quel renderer je dois utiliser ?&amp;#8221;). Si le père connait la réponse, il devra fournir au composant sémantique le bon renderer, sinon, le composant sémantique devra reposer la question un niveau plus haut dans l&amp;#8217;arbre &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; et ainsi de suite jusqu&amp;#8217;à l&amp;#8217;élément racine. Si personne n&amp;#8217;a été capable de lui fournir une bonne réponse, et donc un renderer, il lancera une exception. Cela signifie bien sur qu&amp;#8217;il y a désormais des composants supportant les composants sémantiques.&lt;/p&gt;
&lt;p&gt;Assez de théorie, prenons un exemple concret ! Le composant &lt;strong&gt;modal&lt;/strong&gt; dans RichFaces Bootstrap supporte 3 composants sémantiques : un header, un body et un footer. On peut voir cela en regardant quelles interfaces sont implémentées par &lt;code&gt;AbstractModal&lt;/code&gt; (regardez &lt;a href=&quot;https://github.com/richfaces/sandbox/blob/develop/bootstrap/ui/src/main/java/org/richfaces/bootstrap/component/AbstractModal.java#L49&quot;&gt;le code sur GitHub&lt;/a&gt;). Toutes les interfaces ayant une syntaxe de la forme &lt;code&gt;Render{1}Capable&lt;/code&gt; indiquent que notre composant supporte les composants sémantiques ayant pour nom &lt;code&gt;{1}&lt;/code&gt;, dans notre cas, &lt;strong&gt;headerFacet&lt;/strong&gt;, &lt;strong&gt;bodyFacet&lt;/strong&gt; et &lt;strong&gt;footerFacet&lt;/strong&gt;. Et si vous regardez plus en détail le code de &lt;code&gt;AbstractModal&lt;/code&gt;, vous verrez des méthodes ayant pour syntaxe &lt;code&gt;public String get{1}RendererType()&lt;/code&gt;. Il s&amp;#8217;agit des méthodes qui auront pour tâche de fournir le bon renderer aux composants sémantiques fils. Par exemple, dans le cadre du &lt;strong&gt;modal&lt;/strong&gt;, le composant sémantique &lt;strong&gt;headerFacet&lt;/strong&gt; génèrera un &lt;code&gt;div class&quot;=modal-header&quot;&lt;/code&gt; si l&amp;#8217;on en croit &lt;a href=&quot;https://github.com/richfaces/sandbox/blob/develop/bootstrap/ui/src/main/templates/org/richfaces/bootstrap/modalHeaderFacet.template.xml&quot;&gt;le renderer fournit&lt;/a&gt; par le &lt;strong&gt;modal&lt;/strong&gt;. Mais à l&amp;#8217;intérieur d&amp;#8217;un autre composant, cela aurait pu être un code &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; totalement différent.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;&lt;strong&gt;Pro tip&lt;/strong&gt; Si vous prenez le temps de regarder en détail tous les composants sémantiques, vous remarquerez qu&amp;#8217;ils suivent tous la même syntaxe : en premier leur fonction (comme &lt;strong&gt;header&lt;/strong&gt; ou &lt;strong&gt;footer&lt;/strong&gt;) et ensuite un suffixe commun &lt;strong&gt;Facet&lt;/strong&gt;. Cela nous donne la liste complète des actuels composants sémantiques : headerFacet, bodyFacet, footerFacet, menuFacet et footerFacet. Pourquoi utiliser un suffixe ? Tout d&amp;#8217;abord parce que nous souhaitons conserver le nom sans suffixe pour la véritable balise &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; correspondante. Le composant RichFaces &lt;strong&gt;header&lt;/strong&gt; devra toujours générer une balise &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; &lt;strong&gt;header&lt;/strong&gt; comme un composant &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; classique (la fameuse relation oneToOne) tandis que le composant &lt;strong&gt;headerFacet&lt;/strong&gt;, étant de nature sémantique, peut générer n&amp;#8217;importe quel code &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; dépendant de son contexte d&amp;#8217;utilisation. Ensuite parce que cela rend la vie plus facile pour savoir, rien qu&amp;#8217;à son nom, si un composant RichFaces est sémantique ou non.&lt;/div&gt;
&lt;div class=&quot;alert&quot;&gt;&lt;strong&gt;Attention&lt;/strong&gt; Même si le suffixe utilisé est &lt;strong&gt;Facet&lt;/strong&gt;, gardez bien à l&amp;#8217;esprit que les componsants sémantiques &lt;strong&gt;ne sont pas des facets&lt;/strong&gt; même s&amp;#8217;ils y ressemblent fortement dans l&amp;#8217;idée. Conséquence directe : ils n&amp;#8217;ont pas les mêmes limitations. Les composants sémantiques ont des attributs, peuvent avoir plusieurs fils et ne doivent pas forcément être un fils direct du composant parent les supportant. Vous pouvez également utiliser plusieurs fois le même composant sémantique dans un même composant parent.&lt;/div&gt;
&lt;p&gt;Passons maintenant aux nouveaux composants. Le composant &lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/component/input/&quot;&gt;input&lt;/a&gt; est un input classique mais boosté avec les fonctionnalités de Bootstrap comme prepend et append, ainsi que de nouveaux attributs pour supporter les nouvelles fonctionnalités &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;. Au passage, ce nouvel &lt;strong&gt;input&lt;/strong&gt; centralise et supporte tous les types d&amp;#8217;input en HTML5. Vous n&amp;#8217;aurez donc plus besoin d&amp;#8217;avoir un composant &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; par type d&amp;#8217;input, il vous suffira d&amp;#8217;utiliser l&amp;#8217;attribute &lt;code&gt;type&lt;/code&gt; (la valeur par défaut étant &amp;#8220;text&amp;#8221; bien entendu).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/component/modal/&quot;&gt;modal&lt;/a&gt; est dans la même veine que &lt;code&gt;rich:modalPanel&lt;/code&gt; ou &lt;code&gt;rich:popupPanel&lt;/code&gt;. Il aura pour effet de faire apparaitre une fenêtre d&amp;#8217;alerte au dessus de votre page, couvrant potentiellement celle-ci d&amp;#8217;un filtre sombre pour empêcher toute action en dehors du modal. L&amp;#8217;usage par défaut est d&amp;#8217;avoir un header, spécifié en utilisant l&amp;#8217;attribut &lt;code&gt;header&lt;/code&gt; ou le facet &lt;code&gt;header&lt;/code&gt;, un footer, via le facet &lt;code&gt;footer&lt;/code&gt;, et un &lt;code&gt;body&lt;/code&gt; qui correspondra au contenu de la balise modal. Concrètement, ce qui se passe est que chaque partie, header &amp;#8211; body &amp;#8211; footer, va générer un &lt;code&gt;div class=&quot;modal-xxx&quot;&lt;/code&gt;, où &amp;#8220;xxx&amp;#8221; correspond à ladite partie, autour de son contenu afin de respecter la syntaxe de Bootstrap. Avoir le footer dans un facet peut être limitant car vous ne pouvez pas avoir &lt;strong&gt;un formulaire à l&amp;#8217;intérieur du modal&lt;/strong&gt; qui encapuselerait à la fois le body et le footer car le footer, en tant que facet, se retrouvera toujours à l&amp;#8217;extérieur. L&amp;#8217;usage recommandé est d&amp;#8217;avoir &lt;strong&gt;le modal entier à l&amp;#8217;intérieur du formulaire&lt;/strong&gt; compte tenu du fait que vous n&amp;#8217;aurez surement pas besoin d&amp;#8217;avoir plusieurs formulaires dans un même modal la plupart du temps.&lt;/p&gt;
&lt;p&gt;Mais que se passe-t-il si cela ne vous convient pas ? Si vous voulez vraiment le formulaire à l&amp;#8217;intérieur et non à l&amp;#8217;exérieur ? Même si le comportement par défaut décrit juste avant devrait être suffisant dans la grande majorité des cas, il est parfaitement compréhensible que dans certains cas, vous souhaitiez configurer votre modal de A à Z. Pour ce faire, il vous suffit d&amp;#8217;utiliser un des composants sémantiques suivant dans votre modal : headerFacet, bodyFacet, footerFacet. A partir du moment où l&amp;#8217;un d&amp;#8217;entre eux est détecté, le modal est considéré comme customisé et il ne génère plus de &lt;code&gt;div class=&quot;modal-xxx&lt;/code&gt; par lui même. Je parle bien du modal en personne, les composants sémantiques, eux, génèreront les &lt;code&gt;div&lt;/code&gt; correspondant à leur fonction. Cela vous permettra, par exemple, d&amp;#8217;avoir vos bodyFacet et footerFacet à l&amp;#8217;intérieur du même formulaire lui même à l&amp;#8217;intérieur du modal.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/component/tooltip/&quot;&gt;tooltip&lt;/a&gt; et &lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/component/popover/&quot;&gt;popover&lt;/a&gt; sont deux nouveaux moyens d&amp;#8217;afficher des informations supplémentaires lorsque la souris passe au dessus d&amp;#8217;un contenu en particulier. Le premier est plutôt orienté vers de courts textes ou des libellés tandis que le second peut posséder un contenu plus conséquent et même un titre. Pour le moment, le contenu en question ne peut être que du texte brut mais il est prévu d&amp;#8217;améliorer cela.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;&lt;strong&gt;Pro tip&lt;/strong&gt; Même si &lt;strong&gt;popover&lt;/strong&gt; ne supporte que du contenu textuel pour le moment, vous pouvez quand même utiliser un peu de &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; dedans. Il vous faudra juste écharper les chevrons en les remplaçant par &lt;code&gt;&amp;amp;lt;&lt;/code&gt; et &lt;code&gt;&amp;amp;gt;&lt;/code&gt;.&lt;/div&gt;
&lt;p&gt;Enfin, &lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/component/orderingList/&quot;&gt;orderingList&lt;/a&gt; est la nouvelle version de RichFaces pour son composant oderingList et vous permet de réorganiser l&amp;#8217;ordre des éléments d&amp;#8217;une liste. Il supporte d&amp;#8217;ores et déjà le drag-and-drop (glisser-déposer) d&amp;#8217;un élément individuel, la sélection multiple et un design en forme de &amp;#8220;table&amp;#8221;. Les fonctionnalités à venir sont le drap-and-drop de plusieurs éléments à la fois et peut être la sélection en utilisant la touche &lt;span class=&quot;caps&quot;&gt;SHIFT&lt;/span&gt; du clavier (&lt;span class=&quot;caps&quot;&gt;CTRL&lt;/span&gt; est déjà supporté). Grâce au travail de Brian, il s&amp;#8217;agit du tout premier composant utilisant à la fois la puissance de jQuery UI widget factory avec un design Bootstrap. Si nous pouvons le faire une fois, alors nous pouvons également le faire pour bien d&amp;#8217;autres widgets jQuery.&lt;/p&gt;
&lt;p&gt;De nouvelles fonctions EL sont également de la partie. &lt;a href=&quot;https://github.com/richfaces/components/blob/develop/misc/ui/src/main/java/org/richfaces/function/RichFunction.java#L156&quot;&gt;jQuery&lt;/a&gt; et &lt;a href=&quot;https://github.com/richfaces/components/blob/develop/misc/ui/src/main/java/org/richfaces/function/RichFunction.java#L126&quot;&gt;jQuerySelector&lt;/a&gt; se trouvent directement dans RichFaces Core mais ont été créées avant tout dans l&amp;#8217;optique d&amp;#8217;être utilisées dans RichFaces Bootstrap. Elles vous permettent de récupérer un objet jQuery ou un sélecteur jQuery à partir de l&amp;#8217;id &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; côté serveur.&lt;/p&gt;
&lt;p&gt;Ensuite viennent des &lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com/component/el/&quot;&gt;fonctions EL spécifiques à Bootstrap&lt;/a&gt;. Si vous regardez l&amp;#8217;API JavaScript de Bootstrap, vous noterez que nombre de composants JavaScript possèdent une liste de fonctions avec la syntaxe suivante : &lt;code&gt;$(sel).nomDuComposant('paramUnique');&lt;/code&gt;, comme par exemple : &lt;code&gt;$('#monModal').modal('show');&lt;/code&gt; pour un &lt;strong&gt;modal&lt;/strong&gt;. La première approche pour les utiliser dans une page &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; est de de servir de la fonction &lt;strong&gt;jQuery&lt;/strong&gt; vue précédemment de la manière suivante : &lt;code&gt;onclick=&quot;#{rich:jQuery( 'monModal' )}.modal('show')&quot;&lt;/code&gt;. Cela fonctionne à merveille mais ce n&amp;#8217;était visiblement pas suffisant pour Lukas qui s&amp;#8217;est offert le luxe de coder depuis zéro une autre approche.&lt;/p&gt;
&lt;p&gt;Le nouveau concept vient du fait que la partie &lt;code&gt;nomComp&lt;/code&gt; est inutile si vous pouvez récupérer ledit nom depuis le composant retourné par l&amp;#8217;appel à jQuery. Dans l&amp;#8217;exemple précédent, si l&amp;#8217;on sait que &lt;code&gt;#{rich:jQuery('monModal')}&lt;/code&gt; va retourner un &lt;strong&gt;modal&lt;/strong&gt; alors on sait également que c&amp;#8217;est la fonction &lt;strong&gt;modal&lt;/strong&gt; qu&amp;#8217;il faudra appeler, si bien que la seule inconnue restante est le &lt;strong&gt;paramUnique&lt;/strong&gt;. Voici donc la nouvelle syntaxe : &lt;code&gt;#{b:paramUnique(sel)}&lt;/code&gt;. L&amp;#8217;exemple précédent devient : &lt;code&gt;onclick=&quot;#{b:show('monModal')}&quot;&lt;/code&gt;. Bien moins verbeux et bien plus lisible n&amp;#8217;est-ce pas ? A l&amp;#8217;heure actuelle, RichFaces Bootstrap possède les fonctions &lt;strong&gt;show&lt;/strong&gt;, &lt;strong&gt;hide&lt;/strong&gt; et &lt;strong&gt;toggle&lt;/strong&gt; mais d&amp;#8217;autres suivront bientôt.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;&lt;strong&gt;Pro tip&lt;/strong&gt; Envie de savoir comment la fonction EL récupère le nom du composant ? Facile. Quand le sélecteur est utilisé pour récupérer le composant &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;, il va retourner un &lt;strong&gt;UIComponent&lt;/strong&gt; (par exemple un &lt;strong&gt;UIModal&lt;/strong&gt;) qui, en accord avec la syntaxe du &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; RichFaces, devra étendre un &lt;strong&gt;AbstractComponent&lt;/strong&gt; (comme &lt;a href=&quot;https://github.com/richfaces/sandbox/blob/develop/bootstrap/ui/src/main/java/org/richfaces/bootstrap/component/AbstractModal.java&quot;&gt;AbstractModal&lt;/a&gt;). Et si cet &lt;strong&gt;AbstractComponent&lt;/strong&gt; supporte les fonctions EL spécifiques à Bootstrap, alors il sera annoté de &lt;code&gt;@BootstrapJSPlugin&lt;/code&gt; (comme on peut le voir à &lt;a href=&quot;https://github.com/richfaces/sandbox/blob/develop/bootstrap/ui/src/main/java/org/richfaces/bootstrap/component/AbstractModal.java#L43&quot;&gt;la ligne 43 de AbstractModal&lt;/a&gt;) et c&amp;#8217;est l&amp;#8217;attribute &lt;code&gt;name&lt;/code&gt; de l&amp;#8217;annotation qui nous fournit le &lt;code&gt;nomDuComposant&lt;/code&gt;. Comme je vous l&amp;#8217;avais dit, super facile !&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Le support de &lt;span class=&quot;caps&quot;&gt;LESS&lt;/span&gt;&lt;/strong&gt; n&amp;#8217;est plus un rêve mais désormais une réalité (pour ceux qui ne connaissent pas &lt;span class=&quot;caps&quot;&gt;LESS&lt;/span&gt;, il s&amp;#8217;agit d&amp;#8217;une syntaxe permettant d&amp;#8217;écrire du &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; de manière bien plus puissante et élégante, je vous encourage à consulter le &lt;a href=&quot;http://lesscss.org/&quot;&gt;site du projet&lt;/a&gt; pour de plus amples informations). Grâce au travail incroyable de Lukas, un premier prototype est déjà fonctionnel. N&amp;#8217;hésitez pas à &lt;a href=&quot;http://rik-ansikter.blogspot.fr/2012/08/jsf-meets-skinning-awesomeness-of-less.html&quot;&gt;lire son article&lt;/a&gt; à ce sujet pour en savoir plus (anglais uniquement). Il y a encore du travail à faire, mais il s&amp;#8217;agit un bon point de départ.&lt;/p&gt;
&lt;h3&gt;Qu&amp;#8217;avons nous en approche ?&lt;/h3&gt;
&lt;p&gt;Vous en voulez encore ? Tant mieux car nous avons de nombreuses idées pour améliorer RichFaces !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Un nouveau modèle de build&lt;/strong&gt; est en cours de &lt;a href=&quot;https://community.jboss.org/wiki/RichFaces43BuildRedesign&quot;&gt;discussion sur le wiki RichFaces&lt;/a&gt;. Je vous encourage vivement à prendre le temps de le lire (en anglais uniquement) et de donner votre avis si vous vous sentez concerné par l&amp;#8217;avenir de RichFaces.&lt;/p&gt;
&lt;p&gt;Il est prévu de fournir &lt;strong&gt;un nouveau design à tous les composants&lt;/strong&gt; de RichFaces Core à partir du design de Bootstrap pour que vous puissez utiliser les deux projets en même temps.&lt;/p&gt;
&lt;p&gt;Le composant orderingList n&amp;#8217;est que le commencement. &lt;strong&gt;D&amp;#8217;autres composants basés sur jQuery UI widget factory&lt;/strong&gt; sont en approche. N&amp;#8217;hésitez pas à &lt;a href=&quot;https://community.jboss.org/thread/200343&quot;&gt;poster ici&lt;/a&gt; pour proposer des widgets que vous aimeriez voir dans RichFaces Bootstrap.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>http://pauldijou.fr/blog/2012/08/01/news-richfaces-cdk.html</id>
    <title>News about RichFaces CDK</title>
    <updated>2013-02-18T22:36:04+01:00</updated>
    <published>2012-08-01T00:00:00Z</published>
    <link href='http://pauldijou.fr/blog/2012/08/01/news-richfaces-cdk.html' rel='alternate' type='text/html' />
    <category term='en'></category>
    <category term='fr'></category>
    <category term='richfaces'></category>
    <category term='cdk'></category>
    <summary>
      Table of Content

	English version
	Version Francaise

RichFaces CDK new features
As the RichFaces Bootstrap project grows, we need more tools to achieve new goals and keep the code clean and readable. More tools means a stronger CDK and here are the last features.
Fragments are small portions of code inside the template that are defined outside of the main implementation but can be called inside it or inside other fragments or even inside itself! Say hello to recursion in RichFaces CDK templates. In term of Java, fragments are methods. So when you write a fragment, it will generates a Java method in the final...
    </summary>
    <content type='html'>
      &lt;h3&gt;Table of Content&lt;/h3&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;a href=&quot;#news-richfaces-cdk-en&quot;&gt;English version&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#news-richfaces-cdk-fr&quot;&gt;Version Francaise&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;news-richfaces-cdk-en&quot;&gt;RichFaces &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; new features&lt;/h3&gt;
&lt;p&gt;As the RichFaces Bootstrap project grows, we need more tools to achieve new goals and keep the code clean and readable. More tools means a stronger &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; and here are the last features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fragments&lt;/strong&gt; are small portions of code inside the template that are defined outside of the main implementation but can be called inside it or inside other fragments or even inside itself! Say hello to recursion in RichFaces &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; templates. In term of Java, fragments are methods. So when you write a fragment, it will generates a Java method in the final renderer. Knowing that makes fragments really easy to understand and to use. See the &lt;a href=&quot;https://issues.jboss.org/browse/RF-12226&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12226&lt;/a&gt; for a fully explained example.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;&lt;strong&gt;Pro tip&lt;/strong&gt; Notice that in the signature of the generated Java method, 3 arguments are always passed without having to specify them inside the template : ResponseWriter, FacesContext and UIComponent.&lt;/div&gt;
&lt;div class=&quot;alert&quot;&gt;&lt;strong&gt;Warning&lt;/strong&gt; Currently, if you want to use a fragment1 inside a fragment2, you need to write fragment1 first in your template so its signature has been parsed before calling it in fragment2. Problem is reported in &lt;a href=&quot;https://issues.jboss.org/browse/RF-12326&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12326&lt;/a&gt;.&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;cc:renderFacet&lt;/strong&gt; is a new tag you can use inside a &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; template, equivalent of the same tag from &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; composite component. Its usage is quite straightforward: it will render the facet that you will specify in the &lt;code&gt;name&lt;/code&gt; attribute. If you put some content inside the tag, it will be used as default value in case the facet is missing. See &lt;a href=&quot;https://issues.jboss.org/browse/RF-12260&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12260&lt;/a&gt; for full description.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;varStatus&lt;/strong&gt; is a new attribute for the &lt;strong&gt;c:forEach&lt;/strong&gt; &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; tag. It will perform the exact same thing as the one in the original &lt;strong&gt;c:forEach&lt;/strong&gt; tag, giving you more tools inside a forEach loop. See &lt;a href=&quot;https://issues.jboss.org/browse/RF-12232&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12232&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;wildcard&lt;/strong&gt; can now be used inside &lt;strong&gt;cdk:passThrough&lt;/strong&gt; and &lt;strong&gt;cdk:passThroughWithExclusions&lt;/strong&gt; attributes in order to pass all attributes starting with the same prefix. Especially useful with JavaScript events &lt;code&gt;on*&lt;/code&gt;. Wildcard can be use with attribute mapping like &lt;code&gt;onkey*:oninputkey*&lt;/code&gt;. See &lt;a href=&quot;https://issues.jboss.org/browse/RF-12200&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12200&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;component&lt;/strong&gt; variable is now directly casted to the correct class based on &lt;code&gt;cdk:class&lt;/code&gt; tag in the template. You will no longer need to write explicitly the cast inside 95% of your templates. Enjoy less verbose code and see &lt;a href=&quot;https://issues.jboss.org/browse/RF-12248&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12248&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In general&lt;/strong&gt;, &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; has been improved to be more type-safe which allows to catch more issues at compilte-time.&lt;/p&gt;
&lt;h3&gt;What&amp;#8217;s next?&lt;/h3&gt;
&lt;p&gt;There are still a few points undone in the &lt;a href=&quot;https://community.jboss.org/wiki/CDKWish-List&quot;&gt;&lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; wish-list&lt;/a&gt; and I hope some of them will be realized. One of the most important is probably generating methods from interfaces! See &lt;a href=&quot;https://issues.jboss.org/browse/RF-12339&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12339&lt;/a&gt; to fully understand the concept.&lt;/p&gt;
&lt;p&gt;In another topic, another post will follow next week to talk about what&amp;#8217;s new in &lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com&quot;&gt;RichFaces Bootstrap project&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;news-richfaces-cdk-fr&quot;&gt;Les nouvelles fonctionnalités du &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; RichFaces&lt;/h3&gt;
&lt;p&gt;En même temps que le projet RichFaces Boostrap grandit, le besoin de nouveaux outils pour garder le code propre et lisible se fait sentir. De nouveaux outils signifie un &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; plus puissant et voici les dernières fonctionnalités ajoutées.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Les fragments&lt;/strong&gt; sont de petites portions de code que vous définissez au sein de votre template, à l&amp;#8217;extérieur de l&amp;#8217;implémentation principale, mais ils peuvent être appelé au sein de celle-ci, ou à l&amp;#8217;intérieur d&amp;#8217;autres fragments, ou au sein d&amp;#8217;eux même ! Dites bonjour à la récursivité dans les templates du &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; RichFaces. Côté Java, les fragments sont purement et simplement des méthodes. Cela signifie que chaque fois que vous écrivez un fragment dans un template, cela aura pour effet de générer une méthode Java dans le renderer final. En sachant cela, il devient relativement aisé de comprendre et maitriser les fragments. N&amp;#8217;hésitez pas à lire &lt;a href=&quot;https://issues.jboss.org/browse/RF-12226&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12226&lt;/a&gt; pour un exemple détaillé.&lt;/p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;&lt;strong&gt;Pro tip&lt;/strong&gt; Vous remarquerez que la signature de la méthode Java générée comporte 3 paramètres qui sont toujours présents et que vous n&amp;#8217;avez jamais à spécifier dans le template. Il s&amp;#8217;agit de ResponserWriter, FacesContext et UIComponent.&lt;/div&gt;
&lt;div class=&quot;alert&quot;&gt;&lt;strong&gt;Attention&lt;/strong&gt; Actuellement, si vous voulez utiliser un fragment1 à l&amp;#8217;intérieur d&amp;#8217;un fragment2, vous devez écrire fragment1 en premier dans votre template afin que sa signature ait été parsée avant d&amp;#8217;être appelée dans fragment2. Le problème a été reporté dans &lt;a href=&quot;https://issues.jboss.org/browse/RF-12326&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12326&lt;/a&gt;.&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;cc:renderFacet&lt;/strong&gt; est une nouvelle balise que vous pouvez utiliser dans les templates &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; et qui équivaut à la balise du même nom dans les composants composites de &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt;. Son usage est assez évident : elle va générer le facet que vous aurez spécifié via l&amp;#8217;attribut &lt;code&gt;name&lt;/code&gt;. Si vous spécifiez un contenu dans la balise, celui-ci sera utilisé comme valeur par défaut si jamais le facet était absent. Voyez &lt;a href=&quot;https://issues.jboss.org/browse/RF-12260&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12260&lt;/a&gt; pour une description complète.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;varStatus&lt;/strong&gt; est un nouvel attribut de la balise &lt;strong&gt;c:forEach&lt;/strong&gt; du &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt;. Il a les mêmes effets que celui de la balise originale &lt;strong&gt;c:forEach&lt;/strong&gt;, vous donnant accès à des nouveaux outils à l&amp;#8217;intérieur d&amp;#8217;une boucle forEach. Voyez &lt;a href=&quot;https://issues.jboss.org/browse/RF-12232&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12232&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Les &amp;#8220;wildcards&amp;#8221;&lt;/strong&gt; (= astérisques) peuvent désormais être utilisées dans les attributes &lt;strong&gt;cdk:passThrough&lt;/strong&gt; et &lt;strong&gt;cdk:passThroughWithExclusions&lt;/strong&gt; afin de passer directement tous les attributes commençant avec le même préfixe. Particulièrement utile pour les évènements JavaScript &lt;code&gt;on*&lt;/code&gt;. Les wildcards peuvent bien sur être utilisées dans le cadre d&amp;#8217;un mapping comme &lt;code&gt;onkey*:oninputkey*&lt;/code&gt;. Voyez &lt;a href=&quot;https://issues.jboss.org/browse/RF-12200&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12200&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La variable &lt;strong&gt;component&lt;/strong&gt; au sein des templates est maintenant automatiquement castée dans le bon type en se basant sur la balise &lt;code&gt;cdk:class&lt;/code&gt; du template. Vous n&amp;#8217;aurez plus besoin d&amp;#8217;écrire explicitement ce cast dans 95% de vos templates. Vous apprécierez ainsi un code moins verbeux. Jetez un oeil à &lt;a href=&quot;https://issues.jboss.org/browse/RF-12248&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12248&lt;/a&gt; pour plus de détails.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;De manière générale&lt;/strong&gt;, le &lt;span class=&quot;caps&quot;&gt;CDK&lt;/span&gt; a été amélioré pour être encore plus type-safe et ainsi pouvoir détecter d&amp;#8217;éventuels problèmes à la compilation.&lt;/p&gt;
&lt;h3&gt;Et ensuite ?&lt;/h3&gt;
&lt;p&gt;La &lt;a href=&quot;https://community.jboss.org/wiki/CDKWish-List&quot;&gt;liste des souhaits à réaliser&lt;/a&gt; n&amp;#8217;a pas encore été intégralement réalisée et j&amp;#8217;espère que certains le seront très bientôt. L&amp;#8217;un des plus importants est probablement la génération de méthodes dans les renderer ou les composants à partir de nouvelles interfaces qu&amp;#8217;ils étendraient. &lt;a href=&quot;https://issues.jboss.org/browse/RF-12339&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt; issue 12339&lt;/a&gt; décrit le concept dans son intégralité.&lt;/p&gt;
&lt;p&gt;Dans un autre registre, un autre post suivra la semaine prochaine pour vous parler des nouveautés du projet &lt;a href=&quot;http://bootstrap-richfaces.rhcloud.com&quot;&gt;RichFaces Bootstrap&lt;/a&gt;.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://pauldijou.fr/blog/2012/05/08/jsf-bootstrap-render-all.html</id>
    <title>JSF, Bootstrap and calling render=@all</title>
    <updated>2013-02-18T22:36:04+01:00</updated>
    <published>2012-05-08T00:00:00Z</published>
    <link href='http://pauldijou.fr/blog/2012/05/08/jsf-bootstrap-render-all.html' rel='alternate' type='text/html' />
    <category term='en'></category>
    <category term='jsf'></category>
    <category term='bootstrap'></category>
    <summary>
      The problem
      So, the other day, I was playing with Twitter Bootstrap on a JSF application. Everything was fine until I decide to use a render="@all" somewhere in the page in order to refresh all my components after quite an heavy operation. Working fine.
      But Bootstrap was no longuer fully healthy. The CSS and design were ok, but the Javascript was all broken : nearly all effects didn&#8217;t appear anymore. It was a bit strange so I hit F5 and everything was fine, all Javascript events were back. But the moment my render="@all" was called, they dissapear again.
      Why?
      After some investigations, the reason...
    </summary>
    <content type='html'>
      &lt;h3&gt;The problem&lt;/h3&gt;
&lt;p&gt;So, the other day, I was playing with &lt;a href=&quot;http://twitter.github.com/bootstrap/index.html&quot;&gt;Twitter Bootstrap&lt;/a&gt; on a &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; application. Everything was fine until I decide to use a &lt;code&gt;render=&quot;@all&quot;&lt;/code&gt; somewhere in the page in order to refresh all my components after quite an heavy operation. Working fine.&lt;/p&gt;
&lt;p&gt;But Bootstrap was no longuer fully healthy. The &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; and design were ok, but the Javascript was all broken : nearly all effects didn&amp;#8217;t appear anymore. It was a bit strange so I hit F5 and everything was fine, all Javascript events were back. But the moment my &lt;code&gt;render=&quot;@all&quot;&lt;/code&gt; was called, they dissapear again.&lt;/p&gt;
&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;After some investigations, the reason was that Bootstrap calls a Javascript function that will attach most of its events to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; when the &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;DOM&lt;/span&gt; is ready. Its doing so in order to catch all user interactions when they bubble up to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag which wrap the whole page. With that, you can use Ajax as much as you want and update your &lt;span class=&quot;caps&quot;&gt;DOM&lt;/span&gt; since there is no event attach to a particular &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; tag, they are all in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s really good but that&amp;#8217;s also the reason of the problem. I said Ajax is always fine, and it&amp;#8217;s true as long as you don&amp;#8217;t touch the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag. The moment you update this tag, it will probably be reset to it&amp;#8217;s initial state, without any Javascript event, and since the Bootstrap Javascript function is only called once when the &lt;span class=&quot;caps&quot;&gt;DOM&lt;/span&gt; is ready the first time, Javascript events will not come back. Guess what, &lt;code&gt;render=&quot;@all&quot;&lt;/code&gt; will render your &lt;code&gt;&amp;lt;h:body&amp;gt;&lt;/code&gt; and so will broke all Bootstrap Javascipt events.&lt;/p&gt;
&lt;h3&gt;A workaround&lt;/h3&gt;
&lt;p&gt;The true solution would be to call the Bootstrap Javascript function after each &lt;code&gt;render=&quot;@all&quot;&lt;/code&gt; in order to attach all Javascript events again. But since I have no idea how to do that right now, I have choosen to use an easier workaround.&lt;/p&gt;
&lt;p&gt;Just wrapping your whole page in a &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; panel and render it instead of &lt;code&gt;render=&quot;@all&quot;&lt;/code&gt; should be enough in most use case. It is not exactly the same behaviour, but in most case, when calling &lt;code&gt;render=&quot;@all&quot;&lt;/code&gt;, what you really want is just refreshing your whole page using Ajax. For example:&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;prettyprint linenums&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&amp;#x000A;&amp;lt;html lang=&quot;en-US&quot;&amp;#x000A;      xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&amp;#x000A;      xmlns:h=&quot;http://java.sun.com/jsf/html&quot;&amp;#x000A;      xmlns:f=&quot;http://java.sun.com/jsf/core&quot;&amp;#x000A;      xmlns:ui=&quot;http://java.sun.com/jsf/facelets&quot;&amp;gt;&amp;#x000A;&amp;lt;h:head&amp;gt;&amp;#x000A;    &amp;lt;title&amp;gt;Site title&amp;lt;/title&amp;gt;&amp;#x000A;&amp;lt;/h:head&amp;gt;&amp;#x000A;&amp;lt;h:body&amp;gt;&amp;#x000A;    &amp;lt;h:panelGroup id=&quot;all&quot;&amp;gt;&amp;#x000A;        ... your code...&amp;#x000A;    &amp;lt;/h:panelGroup&amp;gt;&amp;#x000A;&amp;lt;/h:body&amp;gt;&amp;#x000A;&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And replace all your &lt;code&gt;render=&quot;@all&quot;&lt;/code&gt; with &lt;code&gt;render=&quot;all&quot;&lt;/code&gt;.&lt;/p&gt;
    </content>
  </entry>
</feed>
